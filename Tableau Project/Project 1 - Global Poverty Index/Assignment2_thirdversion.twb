<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20231.23.0310.1044                               -->
<workbook original-version='18.1' source-build='2023.1.0 (20231.23.0310.1044)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <VizInTooltipHideWorksheet />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' inline='true' name='federated.1jf5wda190rajc18tjhm91cn9ome' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Final_data_for_assignment' name='excel-direct.0cpsowe01sxqh11byrrvx14ipznu'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='D:/dong;s junior (WSU)/Second Year - 2023/Visual Analytics/Assignment 2/Final_data_for_assignment.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation join='left' type='join'>
          <clause type='join'>
            <expression op='AND'>
              <expression op='='>
                <expression op='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
                <expression op='[Harmonised (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
              </expression>
              <expression op='='>
                <expression op='[MPI dev counts (2010-2021)].[Country]' />
                <expression op='[Harmonised (2010-2021)].[Country]' />
              </expression>
            </expression>
          </clause>
          <relation connection='excel-direct.0cpsowe01sxqh11byrrvx14ipznu' name='MPI dev counts (2010-2021)' table='[&apos;MPI dev counts (2010-2021)$&apos;]' type='table'>
            <columns gridOrigin='A1:Q112:no:A1:Q112:0' header='yes' outcome='2'>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='string' name='Multidimensional Poverty Index - Year and survey - (2010-2021)' ordinal='1' />
              <column datatype='string' name='Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified' ordinal='2' />
              <column datatype='string' name='Multidimensional Poverty Index - National Survey -(2010-2021) Modified' ordinal='3' />
              <column datatype='real' name='Multidimensional Poverty Index - Value' ordinal='4' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)' ordinal='5' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)' ordinal='6' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)' ordinal='7' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)' ordinal='8' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value' ordinal='9' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)' ordinal='10' />
              <column datatype='real' name='SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)' ordinal='11' />
              <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)' ordinal='12' />
              <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)' ordinal='13' />
              <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)' ordinal='14' />
              <column datatype='real' name='SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)' ordinal='15' />
              <column datatype='real' name='SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)' ordinal='16' />
            </columns>
          </relation>
          <relation connection='excel-direct.0cpsowe01sxqh11byrrvx14ipznu' name='Harmonised (2010-2021)' table='[&apos;Harmonised (2010-2021)$&apos;]' type='table'>
            <columns gridOrigin='A1:P200:no:A1:P200:0' header='yes' outcome='2'>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='string' name='Multidimensional Poverty Index - Year and survey - (2010-2021)' ordinal='1' />
              <column datatype='real' name='Multidimensional Poverty Index - Value' ordinal='2' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)' ordinal='3' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year' ordinal='4' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)' ordinal='5' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)' ordinal='6' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)' ordinal='7' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)' ordinal='8' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - School attendance - (%)' ordinal='9' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)' ordinal='10' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)' ordinal='11' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)' ordinal='12' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Electricity - (%)' ordinal='13' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Housing - (%)' ordinal='14' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Assets - (%)' ordinal='15' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation join='left' type='join'>
          <clause type='join'>
            <expression op='AND'>
              <expression op='='>
                <expression op='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
                <expression op='[Harmonised (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
              </expression>
              <expression op='='>
                <expression op='[MPI dev counts (2010-2021)].[Country]' />
                <expression op='[Harmonised (2010-2021)].[Country]' />
              </expression>
            </expression>
          </clause>
          <relation connection='excel-direct.0cpsowe01sxqh11byrrvx14ipznu' name='MPI dev counts (2010-2021)' table='[&apos;MPI dev counts (2010-2021)$&apos;]' type='table'>
            <columns gridOrigin='A1:Q112:no:A1:Q112:0' header='yes' outcome='2'>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='string' name='Multidimensional Poverty Index - Year and survey - (2010-2021)' ordinal='1' />
              <column datatype='string' name='Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified' ordinal='2' />
              <column datatype='string' name='Multidimensional Poverty Index - National Survey -(2010-2021) Modified' ordinal='3' />
              <column datatype='real' name='Multidimensional Poverty Index - Value' ordinal='4' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)' ordinal='5' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)' ordinal='6' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)' ordinal='7' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)' ordinal='8' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value' ordinal='9' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)' ordinal='10' />
              <column datatype='real' name='SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)' ordinal='11' />
              <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)' ordinal='12' />
              <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)' ordinal='13' />
              <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)' ordinal='14' />
              <column datatype='real' name='SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)' ordinal='15' />
              <column datatype='real' name='SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)' ordinal='16' />
            </columns>
          </relation>
          <relation connection='excel-direct.0cpsowe01sxqh11byrrvx14ipznu' name='Harmonised (2010-2021)' table='[&apos;Harmonised (2010-2021)$&apos;]' type='table'>
            <columns gridOrigin='A1:P200:no:A1:P200:0' header='yes' outcome='2'>
              <column datatype='string' name='Country' ordinal='0' />
              <column datatype='string' name='Multidimensional Poverty Index - Year and survey - (2010-2021)' ordinal='1' />
              <column datatype='real' name='Multidimensional Poverty Index - Value' ordinal='2' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)' ordinal='3' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year' ordinal='4' />
              <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)' ordinal='5' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)' ordinal='6' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)' ordinal='7' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)' ordinal='8' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - School attendance - (%)' ordinal='9' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)' ordinal='10' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)' ordinal='11' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)' ordinal='12' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Electricity - (%)' ordinal='13' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Housing - (%)' ordinal='14' />
              <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Assets - (%)' ordinal='15' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' value='[MPI dev counts (2010-2021)].[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' />
          <map key='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' value='[MPI dev counts (2010-2021)].[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' />
          <map key='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' value='[MPI dev counts (2010-2021)].[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' />
          <map key='[Country (Harmonised (2010-2021))]' value='[Harmonised (2010-2021)].[Country]' />
          <map key='[Country]' value='[MPI dev counts (2010-2021)].[Country]' />
          <map key='[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]' value='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]' />
          <map key='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' value='[Harmonised (2010-2021)].[Multidimensional Poverty Index - Value]' />
          <map key='[Multidimensional Poverty Index - Value]' value='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - Value]' />
          <map key='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' value='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' />
          <map key='[Multidimensional Poverty Index - Year and survey - (2010-2021) (Harmonised (2010-2021))]' value='[Harmonised (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
          <map key='[Multidimensional Poverty Index - Year and survey - (2010-2021)]' value='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' />
          <map key='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' value='[Harmonised (2010-2021)].[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' value='[Harmonised (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' value='[Harmonised (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021))]' value='[Harmonised (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' />
          <map key='[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' />
          <map key='[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' value='[MPI dev counts (2010-2021)].[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' />
          <map key='[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' value='[MPI dev counts (2010-2021)].[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' />
          <map key='[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' value='[MPI dev counts (2010-2021)].[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:Q112:no:A1:Q112:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:P200:no:A1:P200:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional Poverty Index - Year and survey - (2010-2021)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Multidimensional Poverty Index - Year and survey - (2010-2021)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Multidimensional Poverty Index - Year and survey - (2010-2021)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional Poverty Index - National Survey -(2010-2021) Modified</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Multidimensional Poverty Index - National Survey -(2010-2021) Modified</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional Poverty Index - Value</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Multidimensional Poverty Index - Value]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Multidimensional Poverty Index - Value</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]</local-name>
            <parent-name>[MPI dev counts (2010-2021)]</parent-name>
            <remote-alias>SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (Harmonised (2010-2021))]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional Poverty Index - Year and survey - (2010-2021)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Multidimensional Poverty Index - Year and survey - (2010-2021) (Harmonised (2010-2021))]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>Multidimensional Poverty Index - Year and survey - (2010-2021)</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional Poverty Index - Value</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>Multidimensional Poverty Index - Value</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021))]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - School attendance - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - School attendance - (%)</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Electricity - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Electricity - (%)</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Housing - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Housing - (%)</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>People who are multidimensionally poor and deprived in each indicator - Assets - (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]</local-name>
            <parent-name>[Harmonised (2010-2021)]</parent-name>
            <remote-alias>People who are multidimensionally poor and deprived in each indicator - Assets - (%)</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Value differences between survey year and 2020' datatype='real' name='[Calculation_640355603458002944]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]-[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' />
      </column>
      <column caption='Total_Contribution_deprivation' datatype='real' name='[Calculation_799951914597445633]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]) +&#13;&#10;SUM([Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]) +&#13;&#10;SUM([Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)])' />
      </column>
      <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
      <column datatype='string' name='[Country (Harmonised (2010-2021))]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
          <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
        </semantic-values>
      </column>
      <column datatype='real' name='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' role='measure' type='quantitative' />
      <column datatype='real' name='[Multidimensional Poverty Index - Value]' role='measure' type='quantitative' />
      <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021))]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' role='measure' type='quantitative' />
      <column datatype='real' name='[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='MPI dev counts (2010-2021)' datatype='table' name='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' role='measure' type='quantitative' />
      <column-instance column='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Attribute' name='[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Attribute' name='[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Attribute' name='[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' derivation='Attribute' name='[attr:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Attribute' name='[attr:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Attribute' name='[attr:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' derivation='Attribute' name='[attr:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' derivation='Attribute' name='[attr:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' derivation='Attribute' name='[attr:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' derivation='Attribute' name='[attr:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' derivation='Attribute' name='[attr:SDG 1. 2 - Population vulnerable to multidimensional poverty - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' derivation='Attribute' name='[attr:SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' derivation='Attribute' name='[attr:SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Avg' name='[avg:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Avg' name='[avg:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Count' name='[cnt:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='CountD' name='[ctd:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country Set]' derivation='InOut' name='[io:Country Set:nk]' pivot='key' type='nominal' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='None' name='[none:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='None' name='[none:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' derivation='None' name='[none:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Value]' derivation='None' name='[none:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' derivation='None' name='[none:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='None' name='[none:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' derivation='None' name='[none:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021))]' derivation='None' name='[none:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' derivation='None' name='[none:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' derivation='None' name='[none:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%) (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population vulnerable to multidimensional poverty - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' derivation='Sum' name='[sum:SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021):qk]' pivot='key' type='quantitative' />
      <column-instance column='[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' derivation='Sum' name='[sum:SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_799951914597445633]' derivation='User' name='[usr:Calculation_799951914597445633:qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Var' name='[var:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
      <group caption='Africa Regions' name='[Country Set]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='union'>
          <groupfilter function='member' level='[Country]' member='&quot;Angola&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Benin&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Botswana&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Burkina Faso&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Burundi&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Cameroon&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Central African Republic&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Chad&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Comoros&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Congo&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Congo (Democratic Republic of the)&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Côte d&apos;Ivoire&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Eswatini (Kingdom of)&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Ethiopia&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Gabon&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Gambia&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Ghana&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Guinea&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Guinea-Bissau&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Kenya&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Lesotho&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Liberia&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Madagascar&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Malawi&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Mali&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Mauritania&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Mozambique&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Namibia&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Niger&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Nigeria&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Rwanda&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Sao Tome and Principe&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Senegal&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Seychelles&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Sierra Leone&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;South Africa&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;South Sudan&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Sudan&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Tanzania (United Republic of)&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Togo&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Uganda&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Zambia&quot;' />
          <groupfilter function='member' level='[Country]' member='&quot;Zimbabwe&quot;' />
        </groupfilter>
      </group>
      <group caption='Latin America and Caribbean' name='[Set 1]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='crossjoin'>
            <groupfilter function='member' level='[io:Country Set:nk]' member='false' />
            <groupfilter function='union'>
              <groupfilter function='member' level='[Country]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Belize&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Bolivia (Plurinational State of)&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Colombia&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Dominican Republic&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Ecuador&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Guyana&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Haiti&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Honduras&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Mexico&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Nicaragua&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Peru&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Saint Lucia&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Suriname&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Trinidad and Tobago&quot;' />
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[Country]' />
            <hierarchy name='[io:Country Set:nk]' />
          </order>
        </groupfilter>
      </group>
      <group caption='Country_with_Null_val' name='[Set 2]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='crossjoin'>
            <groupfilter function='member' level='[Country (Harmonised (2010-2021))]' member='%null%' />
            <groupfilter function='union'>
              <groupfilter function='member' level='[Country]' member='&quot;Afghanistan&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Angola&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Argentina&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Barbados&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Bhutan&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Botswana&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Brazil&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Comoros&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Costa Rica&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Cuba&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;El Salvador&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Georgia&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Ghana&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Guatemala&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Jamaica&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Kiribati&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Libya&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Maldives&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Papua New Guinea&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Paraguay&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Saint Lucia&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Samoa&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Seychelles&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;South Africa&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;South Sudan&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Sri Lanka&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Tonga&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Trinidad and Tobago&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Tuvalu&quot;' />
              <groupfilter function='member' level='[Country]' member='&quot;Yemen&quot;' />
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[Country]' />
            <hierarchy name='[Country (Harmonised (2010-2021))]' />
          </order>
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Country Set]' type='palette'>
            <map to='#499894'>
              <bucket>(&quot;Chad&quot;)</bucket>
            </map>
            <map to='#499894'>
              <bucket>(&quot;Mauritania&quot;)</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>(&quot;Algeria&quot;)</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>(&quot;Guinea-Bissau&quot;)</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>(&quot;South Sudan&quot;)</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>(&quot;Burkina Faso&quot;)</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>(&quot;Libya&quot;)</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>(&quot;Tunisia&quot;)</bucket>
            </map>
            <map to='#79706e'>
              <bucket>(&quot;Côte d&apos;Ivoire&quot;)</bucket>
            </map>
            <map to='#79706e'>
              <bucket>(&quot;Niger&quot;)</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>(&quot;Comoros&quot;)</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>(&quot;Morocco&quot;)</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>(&quot;Burundi&quot;)</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>(&quot;Madagascar&quot;)</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>(&quot;Uganda&quot;)</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>(&quot;Ghana&quot;)</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>(&quot;Sierra Leone&quot;)</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>(&quot;Angola&quot;)</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>(&quot;Kenya&quot;)</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>(&quot;Sudan&quot;)</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>(&quot;Gabon&quot;)</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>(&quot;Senegal&quot;)</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>(&quot;Cameroon&quot;)</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>(&quot;Malawi&quot;)</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>(&quot;Zambia&quot;)</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>(&quot;Egypt&quot;)</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>(&quot;Nigeria&quot;)</bucket>
            </map>
            <map to='#d37295'>
              <bucket>(&quot;Eswatini (Kingdom of\)&quot;)</bucket>
            </map>
            <map to='#d37295'>
              <bucket>(&quot;Rwanda&quot;)</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>(&quot;Gambia&quot;)</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>(&quot;Seychelles&quot;)</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>(&quot;Guinea&quot;)</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>(&quot;South Africa&quot;)</bucket>
            </map>
            <map to='#e15759'>
              <bucket>(&quot;Congo&quot;)</bucket>
            </map>
            <map to='#e15759'>
              <bucket>(&quot;Mozambique&quot;)</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>(&quot;Central African Republic&quot;)</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>(&quot;Mali&quot;)</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>(&quot;Zimbabwe&quot;)</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>(&quot;Benin&quot;)</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>(&quot;Lesotho&quot;)</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>(&quot;Tanzania (United Republic of\)&quot;)</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>(&quot;Ethiopia&quot;)</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>(&quot;Sao Tome and Principe&quot;)</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>(&quot;Congo (Democratic Republic of the\)&quot;)</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>(&quot;Namibia&quot;)</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>(&quot;Botswana&quot;)</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>(&quot;Liberia&quot;)</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>(&quot;Togo&quot;)</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' palette='jewel_bright_10_0' type='palette'>
            <map to='#466f9d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[usr:Calculation_799951914597445633:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (\%):qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (\%):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - 2020:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - 2020:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - 2020:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Value:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Value:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;</bucket>
            </map>
            <map to='#64cdcc'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
            </map>
            <map to='#64cdcc'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
            </map>
            <map to='#64cdcc'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
            </map>
            <map to='#64cdcc'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population vulnerable to multidimensional poverty - (\%):qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population vulnerable to multidimensional poverty - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[cnt:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[ctd:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (\%) (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (\%) (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%) (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%) (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (\%):qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1.2 - Population living below monetary poverty line (\%) - National poverty line - (2009 -2020):qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1.2 - Population living below monetary poverty line (\%) - National poverty line - (2009 -2020):qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1.1- Population living below monetary poverty line (\%) - PPP $1.90 a day - (2009 -2021):qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1.1- Population living below monetary poverty line (\%) - PPP $1.90 a day - (2009 -2021):qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;</bucket>
            </map>
            <map to='#eb1e2c'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;</bucket>
            </map>
            <map to='#eb1e2c'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;</bucket>
            </map>
            <map to='#eb1e2c'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]&quot;</bucket>
            </map>
            <map to='#eb1e2c'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;</bucket>
            </map>
            <map to='#eb1e2c'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;</bucket>
            </map>
            <map to='#eb1e2c'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f9a729'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f9a729'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
            </map>
            <map to='#f9a729'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]&quot;</bucket>
            </map>
            <map to='#fd6f30'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[__tableau_internal_object_id__].[cnt:MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[avg:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[var:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;2011&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;2018&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;2017&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;2013&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;2016&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;2020&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;2014&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;2015&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;2019&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2012&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;2010&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[io:Country Set:nk]' type='palette'>
            <map to='#59a14f'>
              <bucket>false</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>true</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='MPI dev counts (2010-2021)' id='MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF'>
            <properties context=''>
              <relation join='left' type='join'>
                <clause type='join'>
                  <expression op='AND'>
                    <expression op='='>
                      <expression op='[MPI dev counts (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
                      <expression op='[Harmonised (2010-2021)].[Multidimensional Poverty Index - Year and survey - (2010-2021)]' />
                    </expression>
                    <expression op='='>
                      <expression op='[MPI dev counts (2010-2021)].[Country]' />
                      <expression op='[Harmonised (2010-2021)].[Country]' />
                    </expression>
                  </expression>
                </clause>
                <relation connection='excel-direct.0cpsowe01sxqh11byrrvx14ipznu' name='MPI dev counts (2010-2021)' table='[&apos;MPI dev counts (2010-2021)$&apos;]' type='table'>
                  <columns gridOrigin='A1:Q112:no:A1:Q112:0' header='yes' outcome='2'>
                    <column datatype='string' name='Country' ordinal='0' />
                    <column datatype='string' name='Multidimensional Poverty Index - Year and survey - (2010-2021)' ordinal='1' />
                    <column datatype='string' name='Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified' ordinal='2' />
                    <column datatype='string' name='Multidimensional Poverty Index - National Survey -(2010-2021) Modified' ordinal='3' />
                    <column datatype='real' name='Multidimensional Poverty Index - Value' ordinal='4' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)' ordinal='5' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)' ordinal='6' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)' ordinal='7' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)' ordinal='8' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value' ordinal='9' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)' ordinal='10' />
                    <column datatype='real' name='SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)' ordinal='11' />
                    <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)' ordinal='12' />
                    <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)' ordinal='13' />
                    <column datatype='real' name='Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)' ordinal='14' />
                    <column datatype='real' name='SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)' ordinal='15' />
                    <column datatype='real' name='SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)' ordinal='16' />
                  </columns>
                </relation>
                <relation connection='excel-direct.0cpsowe01sxqh11byrrvx14ipznu' name='Harmonised (2010-2021)' table='[&apos;Harmonised (2010-2021)$&apos;]' type='table'>
                  <columns gridOrigin='A1:P200:no:A1:P200:0' header='yes' outcome='2'>
                    <column datatype='string' name='Country' ordinal='0' />
                    <column datatype='string' name='Multidimensional Poverty Index - Year and survey - (2010-2021)' ordinal='1' />
                    <column datatype='real' name='Multidimensional Poverty Index - Value' ordinal='2' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)' ordinal='3' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year' ordinal='4' />
                    <column datatype='real' name='SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)' ordinal='5' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)' ordinal='6' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)' ordinal='7' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)' ordinal='8' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - School attendance - (%)' ordinal='9' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)' ordinal='10' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)' ordinal='11' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)' ordinal='12' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Electricity - (%)' ordinal='13' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Housing - (%)' ordinal='14' />
                    <column datatype='real' name='People who are multidimensionally poor and deprived in each indicator - Assets - (%)' ordinal='15' />
                  </columns>
                </relation>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Bar diff'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Differences between population in multidimensional poverty in survey year and population in multidimensional poverty in 2020</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>Value differences between survey year and 2020 for each Africa Regions.  Color shows details about Year and Survey. 
The view is filtered on Value differences between survey year and 2020, Africa Regions and Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified. 
The Africa Regions filter keeps 43 members</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column caption='Value differences between survey year and 2020' datatype='real' name='[Calculation_640355603458002944]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]-[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_640355603458002944]' derivation='None' name='[none:Calculation_640355603458002944:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_640355603458002944]' derivation='Sum' name='[sum:Calculation_640355603458002944:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <filter class='quantitative' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_640355603458002944:qk]' included-values='in-range'>
            <min>-5803.2611976654007</min>
            <max>68.016030695999689</max>
          </filter>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]'>
            <groupfilter function='level-members' level='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Calculation_640355603458002944:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_640355603458002944:qk]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_640355603458002944:qk]' field-type='quantitative' max='299.70153897740147' min='-5690.7863144192015' range-type='fixed' scope='cols' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_640355603458002944:qk]</cols>
      </table>
      <simple-id uuid='{8812F21E-914B-4F3E-B0AE-DAF302B0FCFA}' />
    </worksheet>
    <worksheet name='Corr matrix'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Deprivation profiles correlation matrix</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>Correlation Matrix is applied on the following attributes: Nutrition (%), Child Mortality (%), Years of schooling (%), School attendance (%), Cooking fuel (%), Sanitation (%), Drinking water (%), Electricity(%), Housing (%) and Assets (%)
A linear trend was applied to assess if there is a linear relationship between values </run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' role='measure' type='quantitative' />
            <column datatype='real' name='[Multidimensional Poverty Index - Value]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' role='measure' type='quantitative' />
            <_.fcp.ObjectModelTableType.false...column caption='MPI dev counts (2010-2021)' datatype='integer' name='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' role='measure' type='quantitative' />
            <_.fcp.ObjectModelTableType.true...column caption='MPI dev counts (2010-2021)' datatype='table' name='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' role='measure' type='quantitative' />
            <column-instance column='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF:qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='None' name='[none:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[__tableau_internal_object_id__].[cnt:MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%) (Harmonised (2010-2021)):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='8' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='9' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='10' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk] + [federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk])))))))))</rows>
        <cols>([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk] + ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk] + [federated.1jf5wda190rajc18tjhm91cn9ome].[none:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk])))))))))</cols>
      </table>
      <simple-id uuid='{0EC43756-9283-45FD-B8B5-D6AFF718E71B}' />
    </worksheet>
    <worksheet name='Data'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>MPI data table</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column datatype='real' name='[Multidimensional Poverty Index - Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column datatype='string' name='[Multidimensional Poverty Index - Year and survey - (2010-2021)]' role='dimension' type='nominal' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Year and survey - (2010-2021)]' derivation='None' name='[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population vulnerable to multidimensional poverty - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population vulnerable to multidimensional poverty - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021)]' derivation='Sum' name='[sum:SDG 1.1- Population living below monetary poverty line (%) - PPP $1.90 a day - (2009 -2021):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020)]' derivation='Sum' name='[sum:SDG 1.2 - Population living below monetary poverty line (%) - National poverty line - (2009 -2020):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population vulnerable to multidimensional poverty - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1.2 - Population living below monetary poverty line (\%) - National poverty line - (2009 -2020):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1.1- Population living below monetary poverty line (\%) - PPP $1.90 a day - (2009 -2021):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Intensity of deprivation - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - population in severe multidimensional poverty - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population vulnerable to multidimensional poverty - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1.2 - Population living below monetary poverty line (\%) - National poverty line - (2009 -2020):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;2019/2021 D&quot;</bucket>
              <bucket>&quot;2018 D&quot;</bucket>
              <bucket>&quot;2017/2018 D&quot;</bucket>
              <bucket>&quot;2019 D&quot;</bucket>
              <bucket>&quot;2015/2016 D&quot;</bucket>
              <bucket>&quot;2019 M&quot;</bucket>
              <bucket>&quot;2017/2018 M&quot;</bucket>
              <bucket>&quot;2014 N&quot;</bucket>
              <bucket>&quot;2014 D&quot;</bucket>
              <bucket>&quot;2016 D&quot;</bucket>
              <bucket>&quot;2018 M&quot;</bucket>
              <bucket>&quot;2014 M&quot;</bucket>
              <bucket>&quot;2011 D&quot;</bucket>
              <bucket>&quot;2012 D&quot;</bucket>
              <bucket>&quot;2017 D&quot;</bucket>
              <bucket>&quot;2010 D&quot;</bucket>
              <bucket>&quot;2013 D&quot;</bucket>
              <bucket>&quot;2016/2017 D&quot;</bucket>
              <bucket>&quot;2016 M&quot;</bucket>
              <bucket>&quot;2019/2020 D&quot;</bucket>
              <bucket>&quot;2019/2020 M&quot;</bucket>
              <bucket>&quot;2010 M&quot;</bucket>
              <bucket>&quot;2020 N&quot;</bucket>
              <bucket>&quot;2015 N&quot;</bucket>
              <bucket>&quot;2018/2019 M&quot;</bucket>
              <bucket>&quot;2016/2018 D&quot;</bucket>
              <bucket>&quot;2014/2015 D&quot;</bucket>
              <bucket>&quot;2017 M&quot;</bucket>
              <bucket>&quot;2019 N&quot;</bucket>
              <bucket>&quot;2017/2018 P&quot;</bucket>
              <bucket>&quot;2020/2021 M&quot;</bucket>
              <bucket>&quot;2016 N&quot;</bucket>
              <bucket>&quot;2014/2015 M&quot;</bucket>
              <bucket>&quot;2011/2012 D&quot;</bucket>
              <bucket>&quot;2018 N&quot;</bucket>
              <bucket>&quot;2015/2016 N&quot;</bucket>
              <bucket>&quot;2012 M&quot;</bucket>
              <bucket>&quot;2014 P&quot;</bucket>
              <bucket>&quot;2011/2012 M&quot;</bucket>
              <bucket>&quot;2015 M&quot;</bucket>
              <bucket>&quot;2015/2016 M&quot;</bucket>
              <bucket>&quot;2011 M&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' value='95' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk] / ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk] / ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk] / [federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk])))</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{83D40DD1-40E9-43CF-A644-66B2C68FF6F8}' />
    </worksheet>
    <worksheet name='Geograph'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>MPI values from each country in the dataset</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Multidimensional Poverty Index - Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='Attribute' name='[attr:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country Set]' derivation='InOut' name='[io:Country Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Value]' derivation='None' name='[none:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[Longitude (generated)]' field-type='quantitative' max='18020909.880241148' min='-9911265.8428715654' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[Latitude (generated)]' field-type='quantitative' max='8285446.749949269' min='-8465668.1038073506' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]' />
              <size column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Value:qk]' />
              <tooltip column='[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='8' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='1364' />
                <format attr='maxwidth' value='1364' />
                <format attr='minheight' value='818' />
                <format attr='maxheight' value='818' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jf5wda190rajc18tjhm91cn9ome].[Latitude (generated)]</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[Longitude (generated)]</cols>
        <annotations>
          <annotation class='point' id='1' mark-position='1' pullback='12' text-width='412'>
            <formatted-text>
              <run fontcolor='#000000'>In / Out of Africa Regions: </run>
              <run bold='true' fontcolor='#000000'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]>]]></run>
              <run>Æ&#10;</run>
              <run fontcolor='#000000'>Country: </run>
              <run bold='true' fontcolor='#000000'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]>]]></run>
              <run>Æ&#10;</run>
              <run fontcolor='#000000'>Multidimensional Poverty Index - Value: </run>
              <run bold='true' fontcolor='#000000'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Value:qk]>]]></run>
              <run>Æ&#10;</run>
              <run fontcolor='#000000'>Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified: </run>
              <run bold='true' fontcolor='#000000'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]>]]></run>
              <run>Æ&#10;</run>
              <run fontcolor='#000000'>Multidimensional Poverty Index - Value: </run>
              <run bold='true' fontcolor='#000000'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]>]]></run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor>
                      <x-fields>
                        <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Longitude (generated)]</field>
                      </x-fields>
                      <y-fields>
                        <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Latitude (generated)]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Value:qk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Latitude (generated)]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Longitude (generated)]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>true</value>
                    <value>&quot;South Sudan&quot;</value>
                    <value>0.58015746000000001</value>
                    <value>0.58015746000000001</value>
                    <value>7.1</value>
                    <value>30.48</value>
                    <value>&quot;2010&quot;</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='385' y='206' />
          </annotation>
        </annotations>
      </table>
      <simple-id uuid='{F39E19C0-97A2-464E-B999-A1206432C1DA}' />
    </worksheet>
    <worksheet name='Null_value'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1'>Countries with Null_value</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country (Harmonised (2010-2021))]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column datatype='real' name='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' role='measure' type='quantitative' />
            <column datatype='real' name='[Multidimensional Poverty Index - Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' role='measure' type='quantitative' />
            <_.fcp.ObjectModelTableType.false...column caption='MPI dev counts (2010-2021)' datatype='integer' name='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' role='measure' type='quantitative' />
            <_.fcp.ObjectModelTableType.true...column caption='MPI dev counts (2010-2021)' datatype='table' name='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' role='measure' type='quantitative' />
            <column-instance column='[__tableau_internal_object_id__].[MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF]' derivation='Count' name='[__tableau_internal_object_id__].[cnt:MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country Set]' derivation='InOut' name='[io:Country Set:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - National Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Value (Harmonised (2010-2021))]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%) (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021))]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[__tableau_internal_object_id__].[cnt:MPI dev counts (2010-2021)_38548AFF86104287A0828E2E5C54DABF:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount  - (\%) (Harmonised (2010-2021)):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year (Harmonised (2010-2021)):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Inequality among the poor - Value:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Set 2]' />
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Set 2]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1jf5wda190rajc18tjhm91cn9ome].[Set 2] / ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk] / [federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]))</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{8F90B549-E1DA-4EED-B716-D1E9C999E524}' />
    </worksheet>
    <worksheet name='Pie chart indicator'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Deprivation indicators profiles in Sub-Saharan Africa</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>There are 10 sectors, each sector is determined based on the sum of all observation of all Sub-Saharan countries in that attribute.
- Red is for child mortality (%)
- Blue is for School Attendance (%)
- Yellow is for Assets (%)
- Light brown is for Nutrition (%)
- etc.</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' role='measure' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Sum' name='[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='240' />
            <format attr='cell-h' value='240' />
            <format attr='cell' value='30' />
            <format attr='cell-q' value='150' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <wedge-size column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{8FCEE341-AE03-4CB2-853A-E37413164F35}' />
    </worksheet>
    <worksheet name='Sheet5'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Total countribution of deprivation across Sub-Saharan countries </run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>Colour shows 3 main attributes to the contribution of deprivation dimension. Red stands for Education (%), Cyan stands for Health (%), Orange stands for Standard of Living (%). 
Angle is determined upon the total sum of each attribute</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='336' />
            <format attr='cell-h' value='336' />
            <format attr='cell' value='42' />
            <format attr='cell-q' value='210' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <wedge-size column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>&lt;</run>
                <run fontcolor='#787878'><![CDATA[Sheet name="Sheet5-sup1" maxwidth="300" maxheight="300" filter="<All Fields>"]]></run>
                <run fontcolor='#787878'>&gt;</run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]>:	]]></run>
                <run bold='true'><![CDATA[<[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='1.6151933670043945' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{388B291D-31A2-4A8A-A065-1A3D6257E7F8}' />
    </worksheet>
    <worksheet name='Sheet5-sup1'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Supporting Sheet</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Sum' name='[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='width' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' value='156' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</rows>
        <cols />
      </table>
      <simple-id uuid='{53201A46-25E3-4DA0-A7D6-73EB105D2EEB}' />
    </worksheet>
    <worksheet name='Side-by-side poverty'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Population in multidimensional poverty in survey year vs Population in multidimensional poverty in 2020</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>The graph shows the changing in population in each country 
Colour represents the year:
- Red stands for the year of survey
- Cyan stands for the year 2020
</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' role='measure' type='quantitative' />
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' role='measure' type='quantitative' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]' pivot='key' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]'>
            <groupfilter function='level-members' level='[Country]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' direction='ASC'>
            <dictionary>
              <bucket>(&quot;Nigeria&quot;)</bucket>
              <bucket>(&quot;Ethiopia&quot;)</bucket>
              <bucket>(&quot;Congo (Democratic Republic of the\)&quot;)</bucket>
              <bucket>(&quot;Tanzania (United Republic of\)&quot;)</bucket>
              <bucket>(&quot;Uganda&quot;)</bucket>
              <bucket>(&quot;Sudan&quot;)</bucket>
              <bucket>(&quot;Mozambique&quot;)</bucket>
              <bucket>(&quot;Niger&quot;)</bucket>
              <bucket>(&quot;Madagascar&quot;)</bucket>
              <bucket>(&quot;Kenya&quot;)</bucket>
              <bucket>(&quot;Angola&quot;)</bucket>
              <bucket>(&quot;Burkina Faso&quot;)</bucket>
              <bucket>(&quot;Mali&quot;)</bucket>
              <bucket>(&quot;Chad&quot;)</bucket>
              <bucket>(&quot;Côte d&apos;Ivoire&quot;)</bucket>
              <bucket>(&quot;Cameroon&quot;)</bucket>
              <bucket>(&quot;Malawi&quot;)</bucket>
              <bucket>(&quot;South Sudan&quot;)</bucket>
              <bucket>(&quot;Zambia&quot;)</bucket>
              <bucket>(&quot;Burundi&quot;)</bucket>
              <bucket>(&quot;Guinea&quot;)</bucket>
              <bucket>(&quot;Senegal&quot;)</bucket>
              <bucket>(&quot;Benin&quot;)</bucket>
              <bucket>(&quot;Ghana&quot;)</bucket>
              <bucket>(&quot;Rwanda&quot;)</bucket>
              <bucket>(&quot;Egypt&quot;)</bucket>
              <bucket>(&quot;Sierra Leone&quot;)</bucket>
              <bucket>(&quot;Central African Republic&quot;)</bucket>
              <bucket>(&quot;Zimbabwe&quot;)</bucket>
              <bucket>(&quot;South Africa&quot;)</bucket>
              <bucket>(&quot;Togo&quot;)</bucket>
              <bucket>(&quot;Mauritania&quot;)</bucket>
              <bucket>(&quot;Liberia&quot;)</bucket>
              <bucket>(&quot;Morocco&quot;)</bucket>
              <bucket>(&quot;Congo&quot;)</bucket>
              <bucket>(&quot;Guinea-Bissau&quot;)</bucket>
              <bucket>(&quot;Gambia&quot;)</bucket>
              <bucket>(&quot;Namibia&quot;)</bucket>
              <bucket>(&quot;Algeria&quot;)</bucket>
              <bucket>(&quot;Lesotho&quot;)</bucket>
              <bucket>(&quot;Botswana&quot;)</bucket>
              <bucket>(&quot;Gabon&quot;)</bucket>
              <bucket>(&quot;Comoros&quot;)</bucket>
              <bucket>(&quot;Eswatini (Kingdom of\)&quot;)</bucket>
              <bucket>(&quot;Libya&quot;)</bucket>
              <bucket>(&quot;Tunisia&quot;)</bucket>
              <bucket>(&quot;Sao Tome and Principe&quot;)</bucket>
              <bucket>(&quot;Seychelles&quot;)</bucket>
              <bucket>(%all%)</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
            </encodings>
            <reference-line axis-column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' enable-instant-analytics='true' fill-above='false' fill-below='false' formula='confidence' id='refline0' label-type='none' paired-distribution-id='refline1' probability='95' scope='per-cell' show-lines='both' symmetric='false' value-column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' z-order='1' />
            <reference-line axis-column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' enable-instant-analytics='true' formula='average' id='refline1' label-type='none' paired-distribution-id='refline0' probability='95' scope='per-cell' value-column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' z-order='2' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set] / ([federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk] / [federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]))</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{D083F09F-1553-4756-A406-96EB094F0EC5}' />
    </worksheet>
    <worksheet name='Stacked bar deprivation'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Contribution of deprivations by each countries in Sub-Saharan Africa</run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>Colour shows 3 main attributes to the contribution of deprivation dimension. Red stands for Education (%), Cyan stands for Health (%), Orange stands for Standard of Living (%). 
Angle is determined upon the total sum of each attribute
Together the 3 attributes adds up to 100 %</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%)]' derivation='Attribute' name='[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%)]' derivation='Attribute' name='[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%)]' derivation='Attribute' name='[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (%):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Education - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</bucket>
              <bucket>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Contribution of deprivation in dimension to overall multidimensional poverty - Standard of living - (\%):qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' direction='ASC'>
            <dictionary>
              <bucket>(&quot;Seychelles&quot;)</bucket>
              <bucket>(&quot;South Africa&quot;)</bucket>
              <bucket>(&quot;Gambia&quot;)</bucket>
              <bucket>(&quot;Gabon&quot;)</bucket>
              <bucket>(&quot;Namibia&quot;)</bucket>
              <bucket>(&quot;Nigeria&quot;)</bucket>
              <bucket>(&quot;Botswana&quot;)</bucket>
              <bucket>(&quot;Eswatini (Kingdom of\)&quot;)</bucket>
              <bucket>(&quot;Cameroon&quot;)</bucket>
              <bucket>(&quot;Uganda&quot;)</bucket>
              <bucket>(&quot;Burundi&quot;)</bucket>
              <bucket>(&quot;Ghana&quot;)</bucket>
              <bucket>(&quot;Zimbabwe&quot;)</bucket>
              <bucket>(&quot;Kenya&quot;)</bucket>
              <bucket>(&quot;Congo&quot;)</bucket>
              <bucket>(&quot;Congo (Democratic Republic of the\)&quot;)</bucket>
              <bucket>(&quot;Sierra Leone&quot;)</bucket>
              <bucket>(&quot;Tanzania (United Republic of\)&quot;)</bucket>
              <bucket>(&quot;Lesotho&quot;)</bucket>
              <bucket>(&quot;Zambia&quot;)</bucket>
              <bucket>(&quot;Niger&quot;)</bucket>
              <bucket>(&quot;Guinea&quot;)</bucket>
              <bucket>(&quot;Angola&quot;)</bucket>
              <bucket>(&quot;Sudan&quot;)</bucket>
              <bucket>(&quot;Togo&quot;)</bucket>
              <bucket>(&quot;Benin&quot;)</bucket>
              <bucket>(&quot;Comoros&quot;)</bucket>
              <bucket>(&quot;Senegal&quot;)</bucket>
              <bucket>(&quot;Burkina Faso&quot;)</bucket>
              <bucket>(&quot;Central African Republic&quot;)</bucket>
              <bucket>(&quot;Liberia&quot;)</bucket>
              <bucket>(&quot;Côte d&apos;Ivoire&quot;)</bucket>
              <bucket>(&quot;Mali&quot;)</bucket>
              <bucket>(&quot;Guinea-Bissau&quot;)</bucket>
              <bucket>(&quot;Chad&quot;)</bucket>
              <bucket>(&quot;Rwanda&quot;)</bucket>
              <bucket>(&quot;Sao Tome and Principe&quot;)</bucket>
              <bucket>(&quot;Malawi&quot;)</bucket>
              <bucket>(&quot;Mozambique&quot;)</bucket>
              <bucket>(&quot;Mauritania&quot;)</bucket>
              <bucket>(&quot;Madagascar&quot;)</bucket>
              <bucket>(&quot;Ethiopia&quot;)</bucket>
              <bucket>(&quot;South Sudan&quot;)</bucket>
              <bucket>(&quot;Morocco&quot;)</bucket>
              <bucket>(&quot;Algeria&quot;)</bucket>
              <bucket>(&quot;Tunisia&quot;)</bucket>
              <bucket>(&quot;Libya&quot;)</bucket>
              <bucket>(&quot;Egypt&quot;)</bucket>
              <bucket>(%all%)</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-transparency' value='255' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]</cols>
      </table>
      <simple-id uuid='{CD23E4C6-9E47-43AE-917E-E71B8484EE59}' />
    </worksheet>
    <worksheet name='Stacked bar indicator'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Deprivation profile of each country in Sub-Saharan region, which includes the 10 indicators </run>
          </formatted-text>
        </title>
        <caption>
          <formatted-text>
            <run>Each country has 10 indicators that are added up together.
- Dark Blue is for years of schooling (%)
- Light Blue is for School Attendance (%)
- etc. this can be checked by through interaction with the graph</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' role='measure' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Assets - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Assets - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Child mortality - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Child mortality - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Drinking water - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Drinking water - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Electricity - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Electricity - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Housing - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Housing - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Nutrition - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Nutrition - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Sanitation - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Sanitation - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - School attendance - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - School attendance - (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%)]' derivation='Attribute' name='[attr:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (%):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Assets - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Child mortality - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Cooking fuel - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Drinking water - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Electricity - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Housing - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Nutrition - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Sanitation - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - School attendance - (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:People who are multidimensionally poor and deprived in each indicator - Years of schooling - (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]'>
            <groupfilter function='level-members' level='[Country]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <manual-sort column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' direction='ASC'>
            <dictionary>
              <bucket>(&quot;Niger&quot;)</bucket>
              <bucket>(&quot;Chad&quot;)</bucket>
              <bucket>(&quot;Central African Republic&quot;)</bucket>
              <bucket>(&quot;Burkina Faso&quot;)</bucket>
              <bucket>(&quot;Burundi&quot;)</bucket>
              <bucket>(&quot;Mozambique&quot;)</bucket>
              <bucket>(&quot;Ethiopia&quot;)</bucket>
              <bucket>(&quot;Madagascar&quot;)</bucket>
              <bucket>(&quot;Congo (Democratic Republic of the\)&quot;)</bucket>
              <bucket>(&quot;Benin&quot;)</bucket>
              <bucket>(&quot;Guinea&quot;)</bucket>
              <bucket>(&quot;Guinea-Bissau&quot;)</bucket>
              <bucket>(&quot;Mali&quot;)</bucket>
              <bucket>(&quot;Tanzania (United Republic of\)&quot;)</bucket>
              <bucket>(&quot;Uganda&quot;)</bucket>
              <bucket>(&quot;Mauritania&quot;)</bucket>
              <bucket>(&quot;Sierra Leone&quot;)</bucket>
              <bucket>(&quot;Sudan&quot;)</bucket>
              <bucket>(&quot;Liberia&quot;)</bucket>
              <bucket>(&quot;Malawi&quot;)</bucket>
              <bucket>(&quot;Rwanda&quot;)</bucket>
              <bucket>(&quot;Zambia&quot;)</bucket>
              <bucket>(&quot;Nigeria&quot;)</bucket>
              <bucket>(&quot;Cameroon&quot;)</bucket>
              <bucket>(&quot;Côte d&apos;Ivoire&quot;)</bucket>
              <bucket>(&quot;Togo&quot;)</bucket>
              <bucket>(&quot;Senegal&quot;)</bucket>
              <bucket>(&quot;Gambia&quot;)</bucket>
              <bucket>(&quot;Kenya&quot;)</bucket>
              <bucket>(&quot;Namibia&quot;)</bucket>
              <bucket>(&quot;Congo&quot;)</bucket>
              <bucket>(&quot;Zimbabwe&quot;)</bucket>
              <bucket>(&quot;Eswatini (Kingdom of\)&quot;)</bucket>
              <bucket>(&quot;Lesotho&quot;)</bucket>
              <bucket>(&quot;Gabon&quot;)</bucket>
              <bucket>(&quot;Sao Tome and Principe&quot;)</bucket>
              <bucket>(&quot;Morocco&quot;)</bucket>
              <bucket>(&quot;Egypt&quot;)</bucket>
              <bucket>(&quot;Algeria&quot;)</bucket>
              <bucket>(&quot;Tunisia&quot;)</bucket>
              <bucket>(&quot;South Sudan&quot;)</bucket>
              <bucket>(&quot;South Africa&quot;)</bucket>
              <bucket>(&quot;Seychelles&quot;)</bucket>
              <bucket>(&quot;Libya&quot;)</bucket>
              <bucket>(&quot;Ghana&quot;)</bucket>
              <bucket>(&quot;Comoros&quot;)</bucket>
              <bucket>(&quot;Botswana&quot;)</bucket>
              <bucket>(&quot;Angola&quot;)</bucket>
              <bucket>(%all%)</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' value='159' />
            <encoding attr='space' class='0' field='[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]' field-type='quantitative' max='656.934715698422' min='38.359849347982276' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
              <lod column='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</cols>
      </table>
      <simple-id uuid='{3547F9C3-A08A-47FC-8AB7-6A88E44B141C}' />
    </worksheet>
    <worksheet name='Sub-shr MPI'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'><![CDATA[Countries in Sub-Saharan Africa with MPI values < 0.50]]></run>
            <run fontalignment='1'>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Multidimensional Poverty Index - Value]' role='measure' type='quantitative' />
            <column datatype='string' name='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' role='dimension' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='Attribute' name='[attr:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified]' derivation='None' name='[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' pivot='key' type='nominal' />
            <column-instance column='[Multidimensional Poverty Index - Value]' derivation='Sum' name='[sum:Multidimensional Poverty Index - Value:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <filter class='quantitative' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]' included-values='in-range'>
            <min>0.0029635</min>
            <max>0.5</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]' />
              <tooltip column='[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</rows>
        <cols>[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]</cols>
      </table>
      <simple-id uuid='{09010E17-1434-45AA-B111-4FB7BA080D80}' />
    </worksheet>
    <worksheet name='Text graph'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1'>Sub-Saharan countries with the highest number of poor people</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI dev counts (2010-2021) (Final_data_for_assignment)' name='federated.1jf5wda190rajc18tjhm91cn9ome' />
          </datasources>
          <datasource-dependencies datasource='federated.1jf5wda190rajc18tjhm91cn9ome'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Eswatini (Kingdom of)&quot;' value='&quot;Eswatini&quot;' />
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' role='measure' type='quantitative' />
            <column-instance column='[SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand)]' derivation='Sum' name='[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
          <slices>
            <column>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Text' />
            <encodings>
              <size column='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - 2020 (thousand):qk]' />
              <text column='[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{FCE02455-E880-4991-90F0-EEF2B3492F2F}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='16' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
              <zone h='98000' id='5' type-v2='layout-basic' w='53300' x='800' y='1000'>
                <zone h='43375' id='3' name='Geograph' w='53300' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='54625' id='12' name='Stacked bar indicator' w='53300' x='800' y='44375'>
                  <layout-cache cell-count-w='43' minheight='345' non-cell-size-w='59' type-h='scalable' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='451' h='98000' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='45100' x='54100' y='1000'>
                <zone h='97963' id='13' name='Bar diff' w='45100' x='54100' y='1000'>
                  <layout-cache cell-count-h='43' minwidth='260' non-cell-size-h='202' type-h='cell' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='900' minheight='900' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='22' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='21' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='43375' id='3' is-fixed='true' name='Geograph' w='53300' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='97963' id='13' is-fixed='true' name='Bar diff' w='45100' x='54100' y='1000'>
                  <layout-cache cell-count-h='43' minwidth='260' non-cell-size-h='202' type-h='cell' type-w='scalable' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='54625' id='12' is-fixed='true' name='Stacked bar indicator' w='53300' x='800' y='44375'>
                  <layout-cache cell-count-w='43' minheight='345' non-cell-size-w='59' type-h='scalable' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{85406ED4-8328-46B6-902C-8DFE3F9C1E14}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='15' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='12' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
              <zone h='98000' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='98000' id='5' type-v2='layout-basic' w='98400' x='800' y='1000'>
                  <zone h='47625' id='13' name='Null_value' w='46300' x='52900' y='51375'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='50375' id='16' name='Data' w='98400' x='800' y='1000'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='47625' id='10' name='Text graph' w='52100' x='800' y='51375'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='900' minheight='900' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='18' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='17' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone fixed-size='280' h='50375' id='16' is-fixed='true' name='Data' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47625' id='10' is-fixed='true' name='Text graph' w='52100' x='800' y='51375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='47625' id='13' is-fixed='true' name='Null_value' w='46300' x='52900' y='51375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{179BF95D-F72F-47E8-A936-015F638FD535}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{41C4B35B-91F9-461E-AD19-F1528F15B88C}' />
    </window>
    <window class='worksheet' name='Null_value'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='119'>
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Set 2]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Set 2:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country (Harmonised (2010-2021)):nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{8B1A875C-1811-40E5-A5F0-A3B344A868D7}' />
    </window>
    <window class='worksheet' name='Geograph'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Value:qk]' type='size' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[attr:Multidimensional Poverty Index - Value (Harmonised (2010-2021)):qk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{DC995F10-5263-4594-8803-80E06C83715A}' />
    </window>
    <window class='worksheet' name='Sub-shr MPI'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Multidimensional Poverty Index - Value:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='1' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country (group)]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{4B27E1DB-EE45-47C4-8855-A36F99DCE5E6}' />
    </window>
    <window class='worksheet' name='Sheet5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{873B692C-BD3D-46E6-A61B-C56BF40B0D8B}' />
    </window>
    <window class='worksheet' name='Sheet5-sup1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{346C9B29-FA14-44FD-9CEC-D54BF165A6C3}' />
    </window>
    <window class='worksheet' name='Stacked bar deprivation'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='140'>
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country (group)]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_1439744536489836546:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0C91857F-811C-4FEF-B02A-44ED4BE3BD26}' />
    </window>
    <window class='worksheet' name='Pie chart indicator'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='2147483647'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8DE0C91B-E924-42EF-A4E0-9B22139562B8}' />
    </window>
    <window class='worksheet' name='Stacked bar indicator'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Set 2]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4677F9AD-FB30-4330-A8FA-AFDFB70F2C8A}' />
    </window>
    <window class='worksheet' name='Side-by-side poverty'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country (Harmonised (2010-2021)):nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - 2020:qk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:SDG 1. 2 - Population in multidimensional poverty - Headcount - thousands - In survey year:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{BF807FFC-00CA-494A-8A95-27163D23CA9D}' />
    </window>
    <window class='worksheet' name='Bar diff'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' type='filter' />
            <card param='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_640355603458002944:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Calculation_640355603458002944:qk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D43B074C-B69E-492D-ADC6-6C887C46FAE2}' />
    </window>
    <window class='worksheet' name='Corr matrix'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Country Set]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FCB5F4B5-0D69-4849-B935-C039930535A6}' />
    </window>
    <window class='worksheet' name='Text graph'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:SDG 1. 2 - Population in multidimensional poverty - Number of poor - Year of the survey (thousand):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4B473126-BFD7-4017-95BC-15264EE704B1}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Bar diff'>
          <zoom type='entire-view' />
          <highlight field='[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Geograph'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Stacked bar indicator'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{E1330280-C5E7-4AAB-8301-907D125283E3}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='Data'>
          <zoom type='fit-width' />
          <selection-collection>
            <tuple-selection>
              <tuple-reference>
                <tuple-descriptor>
                  <pane-descriptor>
                    <x-fields>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
                    </x-fields>
                    <y-fields>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
                      <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]</field>
                    </y-fields>
                  </pane-descriptor>
                  <columns>
                    <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Country:nk]</field>
                    <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - National Survey -(2010-2021) Modified:nk]</field>
                    <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and Survey -(2010-2021) Modified:nk]</field>
                    <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[none:Multidimensional Poverty Index - Year and survey - (2010-2021):nk]</field>
                    <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[:Measure Names]</field>
                    <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[Multiple Values]</field>
                  </columns>
                </tuple-descriptor>
                <tuple>
                  <value>&quot;Kenya&quot;</value>
                  <value>&quot;D&quot;</value>
                  <value>&quot;2014&quot;</value>
                  <value>&quot;2014 D&quot;</value>
                  <value>&quot;[federated.1jf5wda190rajc18tjhm91cn9ome].[sum:Contribution of deprivation in dimension to overall multidimensional poverty - Health - (\%):qk]&quot;</value>
                  <value>23.519400410801243</value>
                </tuple>
              </tuple-reference>
            </tuple-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='Null_value'>
          <highlight>
            <color-one-way>
              <field>[federated.1jf5wda190rajc18tjhm91cn9ome].[io:Country Set:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Text graph' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{A34C93D4-F5AC-49FF-8B8F-61765CB6179A}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Bar diff' width='192'>
      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
      Y9sTRAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Corr matrix' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Data' width='192'>
      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
      fAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Geograph' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Null_value' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Pie chart indicator' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO3dWWxb2YHm8T93ihS1UJRIiVqoffFSVe1a7K5KOk4l05juxjTyFGBegjz2
      wwA9wLzMTIIuNGaAfpieh0ZjBjOYpwzSmKCRRqXSqUrZKduxLVmWLNnaKIlaSEmUKK4SSZG8
      5OW9dx7cZsopy7sku3h+b9K9POeQvN/deM85Ok3TNAShSulPugGCcJJEAISqJgIgVDURAKGq
      iQAIVU0EQKhqIgBCVRMBEKqaCIBQ1UQAhKomAiBUNREAoaqJAAhVTQRAqGoiAEJVEwEQqpoI
      gFDVRACEqiYCIFQ1EQChqokACFVNBECoaiIAQlUTARCqmgiAUNVEAISqJgIgVDURAKGqiQAI
      VU0EQKhqIgBCVRMBEKqaCIBQ1UQAhKomAiBUNREAoaqJAAhVTQRAqGoiAEJVEwEQqpoIgFDV
      RACEqiYCIFQ1EQChqokACK8lSZLQNA0ATdMoFovPVc6JBuAf//Ef+cUvflF5I79vcnLykf+X
      ZZlAIPBCdU9OTrK9vU2pVCKVSqGqKn6/n3g8/sTXqqr62PUmJycPbfuzWF5eplwuA7CwsPBM
      bSmVSqysrJBOp5Ek6Yl1fbn8aDT60DK/308sFvvKa8Lh8KHlxeNxfv7zn7Ozs/OV/8diMfL5
      PNls9iuvy2azfPrpp1/5/5c/z3w+z+zsLP/wD//AzMwMe3t73L17F1VVD3+Dh9Bph219x+An
      P/kJtbW1rK+vYzQa6ejoQKfTodfrKZVKuFwuwuEwKysr/OhHP2JycpJIJEJ7eztLS0t4PB6y
      2Sw2m40PP/yQv/7rv+b9999nf38fVVVZXl7mxz/+Mf/0T/9ELpejpaUFl8uFpmmUy2XW19d5
      8803yWQyxONxGhoacDgczM3NodPp8Hq9TE5O0tHRgclkor6+nuXlZb7zne+QyWTY2NjA7Xaz
      s7OD1+tlYWEBl8tFR0cHiqJgt9vR6/X09PTw61//moaGBtLpNC6Xi1gshtfrJRgM8r3vfY/r
      168zOzvL2bNnyeVytLe3s7y8zA9/+EM+//xz9vb2kCSJnZ0d3nrrLTKZDC6XC5fLRSKRoKGh
      gUwmw8cff8yf/MmfkM/n8fl81NTUcHBwwPLyMh988AGBQIDPPvuM733ve/zyl7/kz/7szzCZ
      TGxsbOBwOPjzP/9zvvjiCyKRCC6Xi3w+j6qqtLS0kEql6Onp4ac//Snvvvsuu7u79PT0kEql
      cLlcNDY24vV6yefz7O/v88Ybb7CysoLf76empoZCoUBtbS3RaJR3332XSCRCLBajqamJbDZL
      U1MTDQ0NLC4u0tPTQ6lU4vLly/T29uLz+XjjjTcIhUI4HA5MJhNTU1MA2Gw2fD4fbrebhoaG
      Z9oGDR999NFHR7BtPxWz2cw3vvEN9vb26O/vR5ZlLBYLkiRht9tpbGzEarXi8/no7+9nZmYG
      j8dDU1MTXV1d2O32SgCampooFovYbDbefvttALq6uuju7sZqtdLZ2YnT6WR7e5u9vb1KOWaz
      GZ1OV/kCHnyYXV1d1NXVYTAYGB4errzeYrFQLpcrdTudToaGhrDZbBSLRRobGyvtLhQKtLS0
      YLVaCQQCtLW1kc/ncblc5HI5XC4XfX19dHR0sLGxgd1uZ2hoiLa2NiRJQpIkTp8+TTAYRK/X
      09zcTE9PD/l8HovFQnd3N8PDw0iSxPb2NsPDw1gsFjo6OshkMng8HsxmMyaTibNnz6JpGqqq
      0tbWhslkwm634/F4UFWV3t5eXC4Xzc3NRKNRhoaGqK2tZW9vD7vdTn19PeVyGZPJhMlkorOz
      E1VVqa+vp1gs4vP5ePPNN6mvr6epqQmr1cqlS5cwGo2V9/rgvbtcLvR6PQaDgXfeeYdsNks2
      m8VsNjM8PExbWxsLCwvIsozL5WJkZASTyURPTw8ejwdJkpBlmfb2dqxWK4lEgtraWlpaWjCZ
      TM+0DZ7oEeAwiUQCl8t10s14IZqmsbCwwMjICKVSCVmWcTgcL6Xsr8Pn82X5fJ4bN25w/vx5
      6uvrn7i+qqqsrq7S39+PTqdD0zQCgQADAwPodLpnqvuVDIAgHAdN0zCedCOEh0WjUWZnZ/nu
      d79LKBRiamqKgYEBQqEQzc3NxGIxLl68+NKOJtVGK2ZQIrMoW5OUt++IALxq3G43TU1NAOh0
      OvL5fOV83Wg0MjIy8lx3O6qVpmlo0j5K6Cay/xOU7SlQSpXlIgCvmHA4zNTUFCaTCUVRKhei
      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
      UNVEAISq9v8BfpoX5HW4xK0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet5' width='192'>
      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
      v+gAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet5-sup1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Side-by-side poverty' width='192'>
      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
      qcb/Bxc7oEJc3kP+AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Stacked bar deprivation' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Stacked bar indicator' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sub-shr MPI' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Text graph' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOydeXhU1d34PzOTZDLZdyALWSEkhDU1QNhBRKqyuIsFRCpSragV7ev7Uhes
      tbVYa3EpikAFUVBAEFllC4SEJBIgZCcLWciemWyTySz3/P5I5/4YEiAoVWnm8zw8ZO5yzrn3
      nu9Zv4tCCCGwY6eXovypC2DHzk+JXQDs9GrsAmCnV2MXADu9GrsA2OnV2AXATq/GLgB2ejV2
      AbDTq7ELgJ1ejV0A7PRq7AJgp1djFwA7vRq7ANjp1dgFwE6vxi4Adno1dgGw06uxC4CdXo1d
      AOz0auwCYKdXYxcAO70auwDY6dXYBcBOr8YuAHZ6NXYBsNOrsQuAnV6NXQDs9GrsAmCnV2MX
      ADu9GrsA2OnV2AXATq/GLgB2ejV2AbDTq7ELgJ1ejV0A7PRq7AJgp1djFwA7vRq7ANjp1dgF
      wE6vxi4Adno1dgGw06uxC4CdXo1dAOz0ahx+6gLY+c9gNBrZu3cvERERhIWFYbFYcHJywmAw
      oFQqMRqN1NbWEhISgsFgwNXVFSEEbm5uN7QcFotFzvvniEIIIX7qQti58XR0dJCVlUV1dTUB
      AQHk5OQQExNDS0sLarUaDw8PTCYTBoMBJycnjEYj5eXlPPTQQ3z99dd4e3vT2trKiBEj6NOn
      z/cuR2VlJdXV1cTHx9/Ap7tx2HuA/1JUKhVhYWFIkoSHhwdRUVH0798fpbJz1GsymWhpaUEI
      QZ8+fWhubsbBobM6GI1GRo8eTXt7O8nJyXh5eREfH8/+/fsZOXIkzc3N+Pr6UlRURHt7O337
      9sXFxYXc3FwcHR2JiIjA29ubjIwM2tra6NevH6WlpVRUVODl5cXgwYNRKBQ/5euRsQvAfykO
      Dg74+fnh5+d33fcaDAZOnjyJTqdj8ODBVFVVUVlZiclkIjc3l/b2dsLDwwkLC6O4uJiUlBQS
      EhIIDw8nKCiI1NRUTCYT48aNo6mpierqagIDA2loaKCwsJDBgwfb5NfU1ERHRwcBAQGUlJQQ
      FhZ2RQGRJAmdTodSqcTLy6vba7RaLR4eHqhUqmu/p+t+O3b+61Gr1QwYMIDDhw/Tp08fvLy8
      2LNnD4MGDaKiogKFQoFer+fkyZPMmDGD0tJSAJsKZ7FYcHR0xDrC3rlzJ7fffjsGg6FLfmVl
      ZRQVFTF9+nT27dvHAw88QHZ2Nj4+PigUCkJCQrh48SIlJSUMGjQIg8FAcnIyiYmJmM1mqqur
      GThwIIWFhbi6uuLj44NSqSQrKwtPT0+GDBlyxWe1C8BNhlar5dChQ8TGxuLu7o5Go+H06dP0
      69cPV1dXGhoa8PHxwWw24+npSVtbGwaDAYvFQp8+fUhNTSUqKgpnZ2daWlpwd3dHoVDQ3NyM
      l5cXbm5u9OvXD19fX6ZPn05KSgqTJ0/GZDLJlc/FxQUXFxecnJw4efIkXl5euLu74+joiEql
      wtfXl8DAQI4ePYpSqaR///6EhoaSmZnZrQAAuLi4kJeXR0REBCaTCUmSyM/Pp0+fPvTt25em
      piZcXV3p27cvWVlZDBo0iOjoaE6dOkVdXR2urq4MHjyY4uJidDod3t7echpXE4CbehIshKCu
      rg6DwUBgYCAAFy5cIDIy8icu2X+O5uZmsrKyKC4upn///nILXV9fT11dHYGBgbS0tFBUVMTA
      gQMpLS0lNjaWiooKhg0bRk5ODt7e3ri7u9Pa2opWq8Xf35+8vDwAwsPDGTZs2I/6TAUFBbi6
      upKZmUlISAjOzs5UV1fT0dGBi4sLRqMRPz8/1Go14eHhFBQUyCtX5eXltLe3079/f4KDg6mo
      qMDBwQG1Wk1VVRV6vZ4ZM2ZcMe+bVgCEEBw6dIiAgADc3d3p6OggNDSUffv2MWvWrJ+6eDcV
      FouFtrY2PDw8fuqi/OjctEOg1tZW2trabLo3g8FAWVkZJ06coLW1lVtvvZXMzEz0ej0AiYmJ
      bN++ncDAQOrr67njjjsoLCykvr6etrY2br31Vmpra8nLy8PBwYFRo0ZRW1tLcHDwdZVNkiRO
      njzJmDFjbugz/6dQqVS9svLDTS4A1u7x1KlTlJaWMnv2bIKCghgzZgzbt2/HbDbTv39/zp8/
      T1paGqNGjcJisTBmzBh2796NXq8nODiYpqYmSkpKaGhooLi4mAEDBhAUFAR0DjmamprIzMzE
      29ubfv36UV5ejpeXF62trej1eiIiIigsLEStVvOLX/wCgIaGBqCzdT1x4gQKhYIxY8aQkZFB
      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
      5Vqr39MbgTXWb3dc+jwWi6XbqDOXo1Qqr9jqnjp1ildffZUlS5bw5JNP4uHhgUKh4OTJk/zj
      H//4wc/xfRofJycn3njjDRwdHUlNTeXll1/G2dm5i0MCayCVJ554ott3EBwcfHUBGDt2LB99
      9BG//vWvbVYxLicwMJADBw5028pWVFTg5eV13R/f29tbdlZldTNytfyzs7Nlg/hLKS0tlaOO
      d4efnx+1tbXXVTbobF2+/vprlixZIucZEBDAuHHj+NWvfvUf3U0ODAzkwoULXZ5XCEFJSYm8
      ytKvXz8aGhp6PJTtjk2bNjF//nx++ctf3pCyX0pQUJDsO+n7oFAoGD16NK+++iovv/wyFouF
      2267TX4nVr+z77zzzhXDLV11I2zixIkolUrWrVvXbYBpaws9YsQIampqumxCSJLEl19+aTP+
      7ylqtZpJkybx9ttv27hBqaurIyUlxebacePGkZ6eTklJic1xg8HAjh07ujh1upSBAwdSUFBw
      XQG0m5ubefXVV/H392fKlCny8V/84hfs3r1bjlV8KR0dHd8riFt3TJgwgR07dnQZnlZXV3Pi
      xAkSExOBTt/8np6e7Nmz53vrN1k9fVyK+HeYpctxcnKiubm5x3lNnDiRo0ePUl1d/b3KBrZC
      sHLlSptndXd3Z+DAgXz99dfdlqmlpeXqAuDq6sry5cv58ssvWbFiBXl5eeh0OoqKilizZg1f
      fvkl0Olsat68ebz00kvs2bOHxsZGiouL+eMf/8j58+d56KGHvteDLVmyBLPZzP3338///M//
      8Oyzz/Loo4928UoRERHB7bffzvPPP8/x48fRarXk5uby4osvIoRgxowZV8wnPj6ewsLCK4bn
      1Ol07Nmzhz179vDNN9/wzjvvMHfuXNra2njjjTds9i1uvfVWVCoVL7zwAqdPn0an01FZWcmW
      LVtYuHBht/51vg9Tp07F19eXZcuWkZWVhU6nIzU1lWeffZbExETZjaSDgwNLly7ln//8Jxs2
      bKC6upra2lq+/vprtm/f3qO8hg8fzoYNGzh79qy8H/Dcc8/xySefdLl26NChnDt3jm3btsn7
      PVb3Mt0RFxfH5MmTWbp0KceOHUOn03H+/HlWrVpFWVlZj9+HVQheeeUV/va3v7F792451NZj
      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
      UCQNFQBF0vwPZLNfmmgLYz0AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
