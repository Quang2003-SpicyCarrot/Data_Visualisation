<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20231.23.0310.1044                               -->
<workbook original-version='18.1' source-build='2023.1.0 (20231.23.0310.1044)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='MPI developed countries (data_for_assignment)' inline='true' name='federated.07gvxr90ldos9r17i8bqy15igyf8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='data_for_assignment' name='excel-direct.0rm8pec0jrv2v3180vdp207xpp1j'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='D:/dong;s junior (WSU)/Second Year - 2023/Visual Analytics/Assignment 2/data_for_assignment.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0rm8pec0jrv2v3180vdp207xpp1j' name='MPI developed countries' table='[&apos;MPI developed countries$&apos;]' type='table'>
          <columns gridOrigin='A1:O84:no:A1:O84:0' header='yes' outcome='2'>
            <column datatype='string' name='Country (2016 - 2021)' ordinal='0' />
            <column datatype='string' name='Year and Survey (2010-2021) - Multidimensional Poverty Index' ordinal='1' />
            <column datatype='real' name='Value - Multidimensional Poverty Index' ordinal='2' />
            <column datatype='real' name='Headcount(%) - Population in multidimensional poverty' ordinal='3' />
            <column datatype='real' name='Intensity of deprivation (%) - Population in multidimensional poverty' ordinal='4' />
            <column datatype='real' name='Number of poor (year of survey) (thousands) - Population in multidimensional poverty' ordinal='5' />
            <column datatype='real' name='Number of poor (2020) (thousands) - Population in multidimensional poverty' ordinal='6' />
            <column datatype='real' name='Inequality among the poor (Value) - Population in multidimensional poverty' ordinal='7' />
            <column datatype='real' name='Population in severe multidimensional poverty (%) - Population in multidimensional poverty' ordinal='8' />
            <column datatype='real' name='Population vulnerable to multidimensional poverty (%)' ordinal='9' />
            <column datatype='real' name='Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='10' />
            <column datatype='real' name='Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='11' />
            <column datatype='real' name='Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='12' />
            <column datatype='real' name='National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2' ordinal='13' />
            <column datatype='real' name='PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1' ordinal='14' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='excel-direct.0rm8pec0jrv2v3180vdp207xpp1j' name='MPI developed countries' table='[&apos;MPI developed countries$&apos;]' type='table'>
          <columns gridOrigin='A1:O84:no:A1:O84:0' header='yes' outcome='2'>
            <column datatype='string' name='Country (2016 - 2021)' ordinal='0' />
            <column datatype='string' name='Year and Survey (2010-2021) - Multidimensional Poverty Index' ordinal='1' />
            <column datatype='real' name='Value - Multidimensional Poverty Index' ordinal='2' />
            <column datatype='real' name='Headcount(%) - Population in multidimensional poverty' ordinal='3' />
            <column datatype='real' name='Intensity of deprivation (%) - Population in multidimensional poverty' ordinal='4' />
            <column datatype='real' name='Number of poor (year of survey) (thousands) - Population in multidimensional poverty' ordinal='5' />
            <column datatype='real' name='Number of poor (2020) (thousands) - Population in multidimensional poverty' ordinal='6' />
            <column datatype='real' name='Inequality among the poor (Value) - Population in multidimensional poverty' ordinal='7' />
            <column datatype='real' name='Population in severe multidimensional poverty (%) - Population in multidimensional poverty' ordinal='8' />
            <column datatype='real' name='Population vulnerable to multidimensional poverty (%)' ordinal='9' />
            <column datatype='real' name='Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='10' />
            <column datatype='real' name='Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='11' />
            <column datatype='real' name='Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='12' />
            <column datatype='real' name='National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2' ordinal='13' />
            <column datatype='real' name='PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1' ordinal='14' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>2</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:O84:no:A1:O84:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country (2016 - 2021)</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country (2016 - 2021)]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Country (2016 - 2021)</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Year and Survey (2010-2021) - Multidimensional Poverty Index</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Year and Survey (2010-2021) - Multidimensional Poverty Index]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Year and Survey (2010-2021) - Multidimensional Poverty Index</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RAU_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Value - Multidimensional Poverty Index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Value - Multidimensional Poverty Index]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Value - Multidimensional Poverty Index</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Headcount(%) - Population in multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Headcount(%) - Population in multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Headcount(%) - Population in multidimensional poverty</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Intensity of deprivation (%) - Population in multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Intensity of deprivation (%) - Population in multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Intensity of deprivation (%) - Population in multidimensional poverty</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of poor (year of survey) (thousands) - Population in multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Number of poor (year of survey) (thousands) - Population in multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Number of poor (year of survey) (thousands) - Population in multidimensional poverty</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of poor (2020) (thousands) - Population in multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Number of poor (2020) (thousands) - Population in multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Number of poor (2020) (thousands) - Population in multidimensional poverty</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality among the poor (Value) - Population in multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality among the poor (Value) - Population in multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Inequality among the poor (Value) - Population in multidimensional poverty</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population in severe multidimensional poverty (%) - Population in multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Population in severe multidimensional poverty (%) - Population in multidimensional poverty</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population vulnerable to multidimensional poverty (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population vulnerable to multidimensional poverty (%)]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Population vulnerable to multidimensional poverty (%)</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2</remote-name>
            <remote-type>5</remote-type>
            <local-name>[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1</remote-name>
            <remote-type>5</remote-type>
            <local-name>[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]</local-name>
            <parent-name>[MPI developed countries]</parent-name>
            <remote-alias>PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <semantic-values semantic-role='[Country].[Name]'>
          <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
        </semantic-values>
      </column>
      <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Headcount(%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Inequality among the poor (Value) - Population in multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Intensity of deprivation (%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' role='measure' type='quantitative' />
      <column datatype='real' name='[Number of poor (2020) (thousands) - Population in multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Number of poor (year of survey) (thousands) - Population in multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' role='measure' type='quantitative' />
      <column datatype='real' name='[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Population vulnerable to multidimensional poverty (%)]' role='measure' type='quantitative' />
      <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
      <column datatype='real' name='[Value - Multidimensional Poverty Index]' role='measure' type='quantitative' />
      <column caption='Year and Survey (2010-2021) - Multidimensional Poverty Index1' datatype='string' name='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='MPI developed countries' datatype='table' name='[__tableau_internal_object_id__].[MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E]' role='measure' type='quantitative' />
      <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Attribute' name='[attr:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Headcount(%) - Population in multidimensional poverty]' derivation='Attribute' name='[attr:Headcount(%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Attribute' name='[attr:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Inequality among the poor (Value) - Population in multidimensional poverty]' derivation='Attribute' name='[attr:Inequality among the poor (Value) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Intensity of deprivation (%) - Population in multidimensional poverty]' derivation='Attribute' name='[attr:Intensity of deprivation (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='Attribute' name='[attr:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of poor (2020) (thousands) - Population in multidimensional poverty]' derivation='Attribute' name='[attr:Number of poor (2020) (thousands) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of poor (year of survey) (thousands) - Population in multidimensional poverty]' derivation='Attribute' name='[attr:Number of poor (year of survey) (thousands) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' derivation='Attribute' name='[attr:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]' derivation='Attribute' name='[attr:Population in severe multidimensional poverty (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Population vulnerable to multidimensional poverty (%)]' derivation='Attribute' name='[attr:Population vulnerable to multidimensional poverty (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Attribute' name='[attr:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Value - Multidimensional Poverty Index]' derivation='Attribute' name='[attr:Value - Multidimensional Poverty Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Count' name='[cnt:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
      <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Inequality among the poor (Value) - Population in multidimensional poverty]' derivation='None' name='[none:Inequality among the poor (Value) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='None' name='[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]' derivation='None' name='[none:Population in severe multidimensional poverty (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' derivation='None' name='[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' pivot='key' type='nominal' />
      <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Headcount(%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Headcount(%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Inequality among the poor (Value) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Inequality among the poor (Value) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Intensity of deprivation (%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Intensity of deprivation (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='Sum' name='[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of poor (2020) (thousands) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Number of poor (2020) (thousands) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of poor (year of survey) (thousands) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Number of poor (year of survey) (thousands) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' derivation='Sum' name='[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Population in severe multidimensional poverty (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Population vulnerable to multidimensional poverty (%)]' derivation='Sum' name='[sum:Population vulnerable to multidimensional poverty (%):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Value - Multidimensional Poverty Index]' derivation='Sum' name='[sum:Value - Multidimensional Poverty Index:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Var' name='[var:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='1' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='false' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;2017 D&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;2015/2016 D&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;2019/2020 D&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;2016 M&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;2020/2021 M&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;2017/2018 P&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;2017 M&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;2016 N&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;2019 M&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;2015/2016 M&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;2019/2020 M&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;2018/2019 M&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;2016/2017 D&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;2018 D&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;2018 M&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;2019 D&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;2019 N&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;2017/2018 D&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;2016/2018 D&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2015/2016 N&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;2019/2021 D&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;2018 N&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;2017/2018 M&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;2016 D&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;2020 N&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Number of poor (year of survey) (thousands) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Number of poor (year of survey) (thousands) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[cnt:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Child mortality (\%) - People who are multidimensionally poor and deprived in each indicator:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[var:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Inequality among the poor (Value) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Inequality among the poor (Value) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Inequality among the poor (Value) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Population vulnerable to multidimensional poverty (\%):qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Population vulnerable to multidimensional poverty (\%):qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:PPP $1.90 a day (2009-2021) - Population living below income poverty line (\%) - SDG 1.1:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (\%) - SDG 1.1:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Intensity of deprivation (\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Intensity of deprivation (\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[__tableau_internal_object_id__].[cnt:MPI developed countries_23FBF6A6A6684E6A87B5ACF22F4A40D7:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:National Poverty line (2009-2020) - Population living below income poverty line (\%) - SDG 1.2:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:National Poverty line (2009-2020) - Population living below income poverty line (\%) - SDG 1.2:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (\%) - SDG 1.2:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Value - Multidimensional Poverty Index:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Nutrition (\%) - People who are multidimensionally poor and deprived in each indicator:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Number of poor (2020) (thousands) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Number of poor (2020) (thousands) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Population in severe multidimensional poverty (\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Population in severe multidimensional poverty (\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Population in severe multidimensional poverty (\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Headcount(\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Headcount(\%) - Population in multidimensional poverty:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='MPI developed countries' id='MPI developed countries_E0A50B2F857B472AB215CB67F5DFE70E'>
            <properties context=''>
              <relation connection='excel-direct.0rm8pec0jrv2v3180vdp207xpp1j' name='MPI developed countries' table='[&apos;MPI developed countries$&apos;]' type='table'>
                <columns gridOrigin='A1:O84:no:A1:O84:0' header='yes' outcome='2'>
                  <column datatype='string' name='Country (2016 - 2021)' ordinal='0' />
                  <column datatype='string' name='Year and Survey (2010-2021) - Multidimensional Poverty Index' ordinal='1' />
                  <column datatype='real' name='Value - Multidimensional Poverty Index' ordinal='2' />
                  <column datatype='real' name='Headcount(%) - Population in multidimensional poverty' ordinal='3' />
                  <column datatype='real' name='Intensity of deprivation (%) - Population in multidimensional poverty' ordinal='4' />
                  <column datatype='real' name='Number of poor (year of survey) (thousands) - Population in multidimensional poverty' ordinal='5' />
                  <column datatype='real' name='Number of poor (2020) (thousands) - Population in multidimensional poverty' ordinal='6' />
                  <column datatype='real' name='Inequality among the poor (Value) - Population in multidimensional poverty' ordinal='7' />
                  <column datatype='real' name='Population in severe multidimensional poverty (%) - Population in multidimensional poverty' ordinal='8' />
                  <column datatype='real' name='Population vulnerable to multidimensional poverty (%)' ordinal='9' />
                  <column datatype='real' name='Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='10' />
                  <column datatype='real' name='Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='11' />
                  <column datatype='real' name='Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty' ordinal='12' />
                  <column datatype='real' name='National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2' ordinal='13' />
                  <column datatype='real' name='PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1' ordinal='14' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='DataSheet'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality among the poor (Value) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' role='measure' type='quantitative' />
            <column datatype='real' name='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' role='measure' type='quantitative' />
            <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column caption='Year and Survey (2010-2021) - Multidimensional Poverty Index1' datatype='string' name='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' role='dimension' type='nominal' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' derivation='None' name='[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' pivot='key' type='nominal' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality among the poor (Value) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Inequality among the poor (Value) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='Sum' name='[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' derivation='Sum' name='[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (\%) - SDG 1.2:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (\%) - SDG 1.1:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (\%) - SDG 1.2:qk]&quot;</bucket>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Inequality among the poor (Value) - Population in multidimensional poverty:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <manual-sort column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' direction='ASC'>
            <dictionary>
              <bucket>%all%</bucket>
              <bucket>&quot;Sri Lanka&quot;</bucket>
              <bucket>&quot;Maldives&quot;</bucket>
              <bucket>&quot;Morocco&quot;</bucket>
              <bucket>&quot;Algeria&quot;</bucket>
              <bucket>&quot;Thailand&quot;</bucket>
              <bucket>&quot;Viet Nam&quot;</bucket>
              <bucket>&quot;Indonesia&quot;</bucket>
              <bucket>&quot;Tunisia&quot;</bucket>
              <bucket>&quot;Jordan&quot;</bucket>
              <bucket>&quot;Philippines&quot;</bucket>
              <bucket>&quot;Iraq&quot;</bucket>
              <bucket>&quot;Samoa&quot;</bucket>
              <bucket>&quot;Dominican Republic&quot;</bucket>
              <bucket>&quot;Albania&quot;</bucket>
              <bucket>&quot;Kiribati&quot;</bucket>
              <bucket>&quot;Tonga&quot;</bucket>
              <bucket>&quot;Serbia&quot;</bucket>
              <bucket>&quot;North Macedonia&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Pakistan&quot;</bucket>
              <bucket>&quot;Montenegro&quot;</bucket>
              <bucket>&quot;Seychelles&quot;</bucket>
              <bucket>&quot;Myanmar&quot;</bucket>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
              <bucket>&quot;Armenia&quot;</bucket>
              <bucket>&quot;Paraguay&quot;</bucket>
              <bucket>&quot;Mongolia&quot;</bucket>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
              <bucket>&quot;Tuvalu&quot;</bucket>
              <bucket>&quot;Palestine, State of&quot;</bucket>
              <bucket>&quot;Tajikistan&quot;</bucket>
              <bucket>&quot;Costa Rica&quot;</bucket>
              <bucket>&quot;Botswana&quot;</bucket>
              <bucket>&quot;Peru&quot;</bucket>
              <bucket>&quot;Ghana&quot;</bucket>
              <bucket>&quot;Mauritania&quot;</bucket>
              <bucket>&quot;Bangladesh&quot;</bucket>
              <bucket>&quot;Ecuador&quot;</bucket>
              <bucket>&quot;Nepal&quot;</bucket>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
              <bucket>&quot;Argentina&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;Mexico&quot;</bucket>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
              <bucket>&quot;Colombia&quot;</bucket>
              <bucket>&quot;Senegal&quot;</bucket>
              <bucket>&quot;Ethiopia&quot;</bucket>
              <bucket>&quot;Benin&quot;</bucket>
              <bucket>&quot;Mali&quot;</bucket>
              <bucket>&quot;Gambia&quot;</bucket>
              <bucket>&quot;Uganda&quot;</bucket>
              <bucket>&quot;Honduras&quot;</bucket>
              <bucket>&quot;Cameroon&quot;</bucket>
              <bucket>&quot;Timor-Leste&quot;</bucket>
              <bucket>&quot;Guinea&quot;</bucket>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
              <bucket>&quot;South Africa&quot;</bucket>
              <bucket>&quot;Chad&quot;</bucket>
              <bucket>&quot;Tanzania (United Republic of)&quot;</bucket>
              <bucket>&quot;Lesotho&quot;</bucket>
              <bucket>&quot;Zimbabwe&quot;</bucket>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
              <bucket>&quot;Nigeria&quot;</bucket>
              <bucket>&quot;Togo&quot;</bucket>
              <bucket>&quot;Angola&quot;</bucket>
              <bucket>&quot;Haiti&quot;</bucket>
              <bucket>&quot;Rwanda&quot;</bucket>
              <bucket>&quot;Liberia&quot;</bucket>
              <bucket>&quot;Sierra Leone&quot;</bucket>
              <bucket>&quot;Zambia&quot;</bucket>
              <bucket>&quot;Jamaica&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
              <bucket>&quot;Burundi&quot;</bucket>
              <bucket>&quot;Congo (Democratic Republic of the)&quot;</bucket>
              <bucket>&quot;Madagascar&quot;</bucket>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>&quot;Cuba&quot;</bucket>
              <bucket>&quot;Suriname&quot;</bucket>
              <bucket>&quot;Belize&quot;</bucket>
              <bucket>&quot;Central African Republic&quot;</bucket>
              <bucket>&quot;Guyana&quot;</bucket>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' value='183' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk] / [federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk])</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{C0829379-A0BF-4408-B51E-7E3D572ED282}' />
    </worksheet>
    <worksheet name='Full data'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Headcount(%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality among the poor (Value) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Intensity of deprivation (%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' role='measure' type='quantitative' />
            <column datatype='real' name='[Number of poor (2020) (thousands) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Number of poor (year of survey) (thousands) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' role='measure' type='quantitative' />
            <column datatype='real' name='[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Population vulnerable to multidimensional poverty (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Value - Multidimensional Poverty Index]' role='measure' type='quantitative' />
            <column caption='Year and Survey (2010-2021) - Multidimensional Poverty Index1' datatype='string' name='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' role='dimension' type='nominal' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' derivation='None' name='[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' pivot='key' type='nominal' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Headcount(%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Headcount(%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality among the poor (Value) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Inequality among the poor (Value) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Intensity of deprivation (%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Intensity of deprivation (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='Sum' name='[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of poor (2020) (thousands) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Number of poor (2020) (thousands) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Number of poor (year of survey) (thousands) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Number of poor (year of survey) (thousands) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' derivation='Sum' name='[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Population in severe multidimensional poverty (%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Population in severe multidimensional poverty (%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Population vulnerable to multidimensional poverty (%)]' derivation='Sum' name='[sum:Population vulnerable to multidimensional poverty (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Value - Multidimensional Poverty Index]' derivation='Sum' name='[sum:Value - Multidimensional Poverty Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Headcount(\%) - Population in multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Intensity of deprivation (\%) - Population in multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Number of poor (year of survey) (thousands) - Population in multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Number of poor (2020) (thousands) - Population in multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Inequality among the poor (Value) - Population in multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Population in severe multidimensional poverty (\%) - Population in multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Population vulnerable to multidimensional poverty (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (\%) - SDG 1.2:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (\%) - SDG 1.1:qk]&quot;' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' direction='ASC' measure-to-sort-by='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' value='84' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk] / [federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk])</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{0E75DF3D-1823-4F18-9504-1AFBFD2A2C80}' />
    </worksheet>
    <worksheet name='PovertyCause'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' role='measure' type='quantitative' />
            <column datatype='real' name='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' role='measure' type='quantitative' />
            <column caption='Year and Survey (2010-2021) - Multidimensional Poverty Index1' datatype='string' name='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' role='dimension' type='nominal' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Year and Survey (2010-2021) - Multidimensional Poverty Index]' derivation='None' name='[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' pivot='key' type='nominal' />
            <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='Sum' name='[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1]' derivation='Sum' name='[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]'>
            <groupfilter function='level-members' level='[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' />
            </encodings>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' />
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' />
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</rows>
        <cols>([federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk] + [federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:PPP $1.90 a day (2009-2021) - Population living below income poverty line (%) - SDG 1.1:qk])</cols>
      </table>
      <simple-id uuid='{AFF95754-DF37-4AA8-8C6F-3FB40B8DD494}' />
    </worksheet>
    <worksheet name='Relationship1'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' field-type='quantitative' max='88.278437459252402' min='-1.4228309784032902' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' field-type='quantitative' max='65.960934249601934' min='2.9728822518307982' range-type='fixed' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <tooltip column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' />
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='exp' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</cols>
      </table>
      <simple-id uuid='{4BD9DAD6-57E2-4023-8DB9-1D6C0F8D9B08}' />
    </worksheet>
    <worksheet name='Relationship2'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='exp' />
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</cols>
      </table>
      <simple-id uuid='{9E7DD487-61F4-430A-B8C9-B98424E03439}' />
    </worksheet>
    <worksheet name='Relationship3'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <trendline degree='3' enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='polynomial' />
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</cols>
      </table>
      <simple-id uuid='{3D073D65-349C-408D-B7D9-4D1998CF461D}' />
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Headcount(%) - Population in multidimensional poverty]' role='measure' type='quantitative' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Headcount(%) - Population in multidimensional poverty]' derivation='Sum' name='[sum:Headcount(%) - Population in multidimensional poverty:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Headcount(%) - Population in multidimensional poverty:qk]</cols>
      </table>
      <simple-id uuid='{74A2D968-54F4-42B7-ACBA-BDF58AA4A524}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='Sum' name='[sum:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
              <bucket>&quot;[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Standard of Living (\%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[Multiple Values]</rows>
        <cols>([federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk] / [federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{883DB5BE-2EF8-4DF9-AB70-6485515D7111}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column datatype='real' name='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' role='measure' type='quantitative' />
            <column datatype='real' name='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' role='measure' type='quantitative' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='None' name='[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty]' derivation='None' name='[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' pivot='key' type='quantitative' />
            <column-instance column='[National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2]' derivation='Sum' name='[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' included-values='in-range'>
            <min>7.3309320000000007</min>
            <max>61.568219999999997</max>
          </filter>
          <filter class='quantitative' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' included-values='in-range'>
            <min>4.6054149999999998</min>
            <max>82.400000000000006</max>
          </filter>
          <filter class='quantitative' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' included-values='in-range'>
            <min>4.0999999999999996</min>
            <max>100.0</max>
          </filter>
          <filter class='quantitative' column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' included-values='in-range'>
            <min>1.0583822000000001</min>
            <max>65.336499000000003</max>
          </filter>
          <slices>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]</column>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</column>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</column>
            <column>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[Longitude (generated)]' field-type='quantitative' max='18452075.319418296' min='-16626584.375352928' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[Latitude (generated)]' field-type='quantitative' max='8793444.310247479' min='-11200107.682325097' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' palette='purple_10_0' type='interpolated' />
            <encoding attr='color' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' palette='purple_10_0' type='interpolated' />
            <encoding attr='color' field='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' palette='red_green_diverging_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' />
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' />
              <lod column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' />
              <lod column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' />
              <lod column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' />
              <lod column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' />
              <geometry column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[Latitude (generated)]</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{37235842-E34B-48B8-A9AA-5C4C855D4870}' />
    </worksheet>
    <worksheet name='Sheet 9'>
      <table>
        <view>
          <datasources>
            <datasource caption='MPI developed countries (data_for_assignment)' name='federated.07gvxr90ldos9r17i8bqy15igyf8' />
          </datasources>
          <datasource-dependencies datasource='federated.07gvxr90ldos9r17i8bqy15igyf8'>
            <column caption='Country (2016 - 2021)1' datatype='string' name='[Country (2016 - 2021)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <semantic-values semantic-role='[Country].[Name]'>
                <semantic-value key='&quot;Palestine, State of&quot;' value='&quot;Palestinian Territories&quot;' />
              </semantic-values>
            </column>
            <column datatype='real' name='[Value - Multidimensional Poverty Index]' role='measure' type='quantitative' />
            <column-instance column='[Country (2016 - 2021)]' derivation='None' name='[none:Country (2016 - 2021):nk]' pivot='key' type='nominal' />
            <column-instance column='[Value - Multidimensional Poverty Index]' derivation='Sum' name='[sum:Value - Multidimensional Poverty Index:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:qk]' shelf='columns' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:qk]</rows>
        <cols>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</cols>
      </table>
      <simple-id uuid='{FA4A5853-E969-4124-9754-0B1C5C006C88}' />
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' maximized='true' name='DataSheet'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{DB073016-1F35-4506-82F9-450613BE6724}' />
    </window>
    <window class='worksheet' name='PovertyCause'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' type='filter' />
            <card pane-specification-id='3' param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country:nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FC285ABF-A380-48C8-B8BE-E04FB3DD1E27}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{6A7AA756-CF8A-4EA3-9C24-761F14733AA4}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:National Poverty line (2009-2020) - Population living below income poverty line (%) - SDG 1.2:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[attr:Population in severe multidimensional poverty (%) - Population in multidimensional poverty:qk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Health (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Inequality among the poor (Value) - Population in multidimensional poverty:qk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Standard of Living (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Year and Survey (2010-2021) - Multidimensional Poverty Index:nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Education (%) - Contribution of deprivation in dimension to overal multidimensional poverty:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{59263895-73AA-4041-BAF4-53FECCB6332C}' />
    </window>
    <window class='worksheet' name='Relationship1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7934F8F6-A26B-4997-AD74-5A2A0E191B93}' />
    </window>
    <window class='worksheet' name='Relationship2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8EE44331-DCC7-427F-9EED-3086108EC146}' />
    </window>
    <window class='worksheet' name='Relationship3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{E9E2BE47-F6D5-4015-ADE5-0F50660D34F0}' />
    </window>
    <window class='worksheet' name='Full data'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]' show-morefewerbutton='false' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[:Measure Names]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[sum:Value - Multidimensional Poverty Index:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{89B05E09-1000-49F2-89D2-90C4275ED787}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BB8EF546-718C-4A97-A95C-3E32E41D369D}' />
    </window>
    <window class='worksheet' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.07gvxr90ldos9r17i8bqy15igyf8].[none:Country (2016 - 2021):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C9470953-17A1-45B3-B996-5B23D23A8D1B}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='DataSheet' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Full data' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='PovertyCause' width='192'>
      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
      e321tuJGoAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Relationship1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29eXRc133n+Xm17yjUhirsK7FwF3eKkijJkhdZlu0TO3GcTLZ2YifpxZ4s
      k8zpzsTdTqZ7kskyk3anO7bj2M7EsTtxbDmyJNuUIlISN3ADQRIgiB2FQqEKte/vvfkDqieC
      KJBYCgRA1uccnkOgHn51X9X73fu79/5+3yvIsixTocJDimq1fyjLMvfLd8r9Ppvd3nrYXA97
      W6GN92LVDrDUG2Sz2bWYLIkoig+VvfWwuR5tlCSprPY24p6X5wCyjCRJyLKMKErcza/W44Ou
      UGG90Cznonw6Qt+gH2+VgdmcQE9HMyqWHgYf1pCg3GzmNhZtbeY2LsfeshxAymfJZDOEUgK5
      RJx0oRmjSlpyCCz30ChJEoIgPDT21sNmue2txxxgI+55WQ6gs9XQ0iBir3YwOxfDohWQZRWC
      IKBSLY6i1Gr16lq8BLIsl9XmZre3HjbXw54kSZu+jfeytywHEAQBr68OgHqfce0tq1Bhk7Cm
      VaBSlLsnrFBhPSm7A1RWgSpsJcruABUqbCXK7gClJsUVKmxWyv60lnsJtEKF9aTSXT/A5AsS
      +UJlTnY3lrUMuhIqIdDmIJHO8dv/7VXyBYn/8plnsBjK/lU/EFRCoAeUeCqLP5RgJpIkkshs
      dHNIpHP0Dc9suhGp7N1CuVMCKqwOn9PKf/i5JxAliaaaqg1fnv7jb75F74CfTz6zk48/uX1D
      23I7FQd4QBBFkVgshtFoxGAwALCnw7vBrXoXi1GLSiVg0ms3uikLEJZVESbLZLMZNDo9+Xwe
      g16vJEPdGfOnUilMJlNZG1koFNBoyuerm93eamxms1n+4R/+gYMHD+J0OkkkEoTDYaxWK+Fw
      GLPZjMViIZFI0NnZueaOaqW5QPmCyGw0RY3DgmqJ996I72V56dCpOfoG/biqzSTjCVq6t6MX
      5Eo69DraW6lNnU5He3s7sViMmzdvYrVaMZvNzMzMMDo6itFopKqqiuvXr7Nt27aytG05GaGx
      WAybzYZGrcLrsCh/eze75aQ86dBigUI+SyCYw2M3I8kgIyu9wKLryzwRXup9HlR7q7XZ09OD
      SqXCarXi8/kQBAFJknA6nTidTiRJorW1tWypzMtp49jYGNlsFq1Wi9/vx+PxkM/n2b9//6rs
      lbt9y0uHtrrpaFVhraoiHk9h1synQ5cKgaCSDr1RNs1mMwDt7e0Lft/e3l728KLoQPdqo06n
      Q61Wk0wmuX79OhqNhmw2W/LvNuJ7Wd4cYAnjpRwgnU5jNJY3ZXqzx+ybYQ5wv+2tpR4gEAhQ
      U1Oz6Pcbcc9l3weorAJVuBelHv6NorIRVuGhpjICVHioKekAhYK46lWCigNU2EqUdIDL/Td4
      +cSpVTlBJQSqsJVY5ABnL/bxjW9/n0JBJLMKlbfKCFBhK7FojchsNPLUY4d47pnHV2Ww4gAV
      thKLHKCns42ezrZVG6yEQBW2EiXnAEH/BKFIfFUGKyNAha1ESQfIZ5L8y+uvcW1w9H63p0KF
      +8oiB5DlPJeuDOCw2mlpb3zndzJz4RDZbJZQaI67BTmV8zYeDKKJDF/+5wucuz610U1ZV0ok
      Sqhxuhy09exC/044I+bj3ByaoM5lJiLrqHbY75pptxkyI7eyvfWwuVJ7r54b4p9O3uCNS2N8
      6befL2lvo9tYDnuLRgBBUFHjsHC+9wpKEZ2sxqiXiecFMrPTpDdXWWeFdWDftlra6xy89+Dq
      F0S2AiVT5YJhP2PXIuSfOooGUOuMNDS1YDabSKVr3kmHnleAKJUOXW5lCEmSympzs9tbD5sr
      tddSW80f/9qzS75e7F038+e4HHslHcDtrKWmzYDunZ8FQUVVVRUANuvdazorsihbk3Q6zdWr
      V3E4HOh0Ourr6xe8HolEsNvtG9S69aOkA2j0RiwG7V2PQlqKyiR4a3L58mWmpqaQJIloNMrg
      4CBXrlyhra2NVCqF1+sln8/j9/v55Cc/uWHt/Lsf9fHm1XF+/SMH2dbgXLO9kg4wGwyRSSQQ
      l7rgLlQcYGtit9sxGo3o9XpUKhVqtZru7m7sdjuNjY3Mzs6Sy+XKXuy0Un58YZhAOEnvgH/9
      HMBuM3J9KqqEQCuhEgJtTTo7O+/6erGIJRLP8MalUfZu82HU3f+zIH7tIwe5dHOa9x1qv/fF
      y6CkA/gDYXSZOFPhGHUO24oMVkaAB5u/+M4Zzlyb4gOH2/lXz+297++/u62G3W3lqygr6QC7
      9x2gPZ3BaFj5GFBxgAebencVFwcD1LlW1jGuhRs3bmA0GnG73aRSKRKJBLFYDKvVisPhIJFI
      KCoYK2VRUXxybobzV64jqPQcPnaIpdZ8liqKz2QyijJZudjsBeIPU1G8JMkkMznMBm3ZVRxK
      tVGSJH784x+j1WqZnp6mp6eHSCRCIpHg+vXr7NmzB71ez5EjRxY5wKqK4s3VHqoMItcv37xr
      ysNSVEaArcf169eZmZlZ8LtMJkMkEkEU56sDr127RjQaZXx8DKtJv+hhi0QiC3ZdRVEknU6v
      uW0jIyPs2bMHk8nEU089RXd3NwaDge3bt3PkyBF27drF9u2r1xot6R4Odx3mqiCryeusOMDW
      Y2RkhGvXrtHc3EwmkyGTySjSJYlEgmeffZa+vj5CoRAqlYpXX32Vffv2IYoiFy9eZNeuXQwP
      D9PW1kY2myWdTuNwONBqtZw5c4af+ZmfQa/Xr6ptra2tALhcLuV3Bw4cAKCxsXHN915yyWZy
      fILW9vZVVcxXVoG2Hu3t7WSzWTKZDOl0moaGBrq6ujCZTOzatYtCoUBPTw/pdBpZlhEEgdnZ
      WQqFAjqdTlkeLTpPa2srGo2GcDiMIAhlGQnWi5LCWGM3++m7NcN7nz3OUhFeRRhr/eyth83N
      JIy1FJtGGCsWT6IRRQrv/CzLEtNTk2SyWULhyF0NVkKgCluJRe4hS1mQNejNJsU7xFyc8ckQ
      2XweOZ9Db6vCKEhLiqyW+zAGSZLKanOz21sPm+W2Vy6B3dvZiHte5ACCSo/BYiIydOu2VSAt
      JoNEOBJHrxJQC++WPt6PbNClRHgfVHvrYXM97N2ebZnJFXizb5yuRhe1LuumaeOqskHJxSho
      LcoIoNYZaevoQq/XkcsX0Kvn06GhdA3wetQFl9vmZre3HjbXw17R5vfeHOAbr16hxWfnT//1
      +9Zks5zcy17pZLhwnDqfW1kGFQRB2dzS6+6+O1xZBXo4aaqpwqjX0F7n2OimrIjSyXBVRoZG
      Y6vKBq3IopSPXF7kD7/+BnOJDL/3809Qbd3YTMy7cbC7jq/+zofRau5/gtxaKNldm6028nKh
      /CfoVVgR0WSGy7dmGPZHGJ+JbXRzFlDcHZ6dnSWfzyMIAnqdBpVqPm6Ix1cnq3O/KfmMh2aj
      OJ1WJFhyH2ApKiFQ+XBVmfjsxw8TT+XY3uze6OYsoFg0UygUGB8fZ3p6mmQyic1mQ61W4/V6
      uXDhAocPH150Ys1moqQDFEQRg960qlSISghUPgRB4NjOtW/3rweTk5Po9Xqi0Sg6nY65uTns
      djsulwufz8fMzAxGo5FUKrXRTb0rJfcBkpEo/aPD7DywpxIG3UdefPFFmpqaMBqNOBwO/H4/
      dXV1xGLz4Y9OpyMYDCJJEp2dnWXPul0J27dvp7u7G7VazdTUFNXV1XR1dSmv+3w+du/evWHt
      Wy6Lnu9MIonR4eERR+2qHv5yHxb3MLFjxw6uXLnC1NQUjY2NOBwOvve97+FwOKiqqiKZTDI1
      NYXVar3nUafpbJ7f+/Jr5EWR//hLT2HQrl9oWltbS21t7brZX08WPeN6SxVyPkMwtLqa4HLv
      iG5mgpEkWo0ai6E842ShUGD37t00NjbicrmoqqqiqamJ2dlZLl26REtLC7t27aK2thbdPZaj
      Q7E0AxMhZBkC4QRNNfevgGUrsXgnmAImgwmVrlD+85MeIMZnonzuL17BqNPwp//6WRy2tTtB
      cbLY2NioJHJZLBa8Xi87duxYka06l5XPffwIBVGitbb6oeqYVkKJb01gYPAmJqtjVQUxD0sI
      JErzqQAFUWIz5v8JgsDju5s2uhmbnkUOkIpFMdvtWGz2VY0AD0tP01RTxZ//2/ej06ipMq+u
      2KNcjI2NMTQ0xPDwMB/84AdJJBIYjUYkSSKXy6FWq1GpVMTjcVQqFQ0NDZhMpg1t82Zh0TNu
      qnKye/s2RFFcsAyajEXJZlIMDY2wlR/xcCzN998aJBRb2/KcIAjUuWy47eYytWxtbZEkCaPR
      yJUrV5iYmOD69esMDQ0xNjbGyMgIN2/epLa2Fr/fT29v70Y3uSwMjIf4w2+c5OLgNOl0mr/7
      u7/jzJkzFAoF5ZpIJMKNGzcW/e3IyAhQag4gzIsi5dNpZRIsSwWG+vswOmuQ9CZU72QCFv/d
      ye0NKAeSJJXN5l99v5dTV8a5NhbiN37ycFlslrN9q7HpcDjYuXMngiAgyzLhcBifz0culyMU
      CqHRaFCr1QwPD+NwOGhqaipLe8udEr3Sz/G7p27w9tUJEqksv/8LT9DS0oLRaOTv//7vcblc
      XL9+nUOHDpHNZvna177Gnj17EEURr9dLLBajvr6+9CLPXDiM3mxWhod0bI50QUSvM5KcniBV
      68Oknn+11M7veswDymVzR4uH8zf87Gj1lLWdG3nPJpNpQUjjdr+7a1yspRVFkebm5rK2bz1E
      gVfyOX7w6DbS2QIfONyOWq2mvr4evV6P1+slGAxiNpupq6sjl8vx5JNP4vV6cbvdBINBLBYL
      arW6dEnk+bdPojLY2blnh+Iht19W7GlK5VunUqmyx5flLJWTZZmCKKJRq8uWelspiSwPm6Yk
      srq6mlw2t+B3xdzvez00m2EV6NKlS+RyOS5evAjA7OysEqoJgoDA/BcYjUYBSCaTG9XUJTl5
      ZYxPfP5/8nc/6tvopmwo4Via6VBi3UptF7lHcm6GiUAIQaVflTr0Rq8CZTIZbt68SaFQYGZm
      homJCQRBQBRFXC4X4+Pj2Gw2PB4PsViMeDxOKpWivb2dc+fO0dPTg16v59ChQxt6H/0jQVKZ
      PJeHAvzU0yvbA3hQiCWz/Js/f4l0Ns8f/eqztPiqy/4ei88Jrvbgsd/iYt9Mqes3PX6/H7t9
      /ginnp4eTp8+jd1uZ+fOnYyNjeF2u2lqakKSJEXeo62tTZEDKYfWTDn4xNM7aPDY2de1NVMM
      ysV8xCEgrCo1cxn2S80BpqcmuH51kEefeXLF0ojZbHbVIkhLsdrYsFAo0Nvby759+xaEZhsZ
      X0uyjMC9S/Uqc4B55uJpcnmRGoelLPbupOQcYGLoBmpL1T19bnh4mGQyuSA+2+gQ6HY0Gg0H
      Dx7cFPMSgOlQgl/+v77H//5XPyaX3zyf02bi7NmzXLp0Sfm52mpUHv7inK2clHQPq91CeDx1
      z2Q4s9nMpUuXSKfT+Hy+si+zPWhMheIEIyliySypbB6ddnM45mbC5XJhMBiYmpoiFArhcrkI
      hUIIgkA4HKa9vR2VSqWcV7BWSj7fFquNvDCzZPhTxOPx4PV6kSSJ6elpLly4QDwep7Gxkebm
      ZoxGY+Xk+NvY3V7D5z5+GLvViN2ycbn8mx1JknjjjTfw+XwMDg4iiiKxWIy2tjZ+/OMfs3Pn
      zrI5QMk5gH/0JidOXeQnfvonljwlZqk5QCKRIBqNMjw8TC6Xw+fzKUUeq3WGzR4Pl8ueLMuI
      koxaNb9qdbv2UjHdYbUbT8tpoyzLXB0Ocss/x/sOtt91hHpQ9gFKvhqLhHA3Nt1zBCiFSqWi
      rq6Ouro6JEliamqK8+fPk8/ny+IMDzJ/9WIvP+4d4d997BD1VQJXrlwhGAzy6KOPksvliMfj
      eDwemprWJ8tTkmT+4BtvkEznMeg0PHtg658RHIwkee3CCI/tbsJbYiJdsjuJp/IUImGyq3jD
      23sElUpFfX09jz32GMePH8dqtdLb28uJEye4du0aqVSqoiV6G/2js6SyeYYm55RNR6PRyPj4
      OKdOnUKWZQKBwIK/CcfS/MHX3+BbJ66u+bNUqQQOdNbhtpvoqF/7AXTrzUunb/L5v36dyeDS
      ihlf/cElvv7qFb78/QslXy85Auzdf4DZSJLVRKlLrQIVnaG+vh5RFJWsxHw+T01NDU1NTZhM
      pi03Mvj9fq5evUpzczOyLKPT6airq0OWZTQaDZOTk8zOzqLX69m2bRuCIJDP55WkL51OhyiK
      6PV6Pnyskz/79mlcdhPV1dUcPjyfrJfL5WhoaMDj8Sx6/3M3pjjdP8nFwWk+dKwTvXb1IYQg
      CHz24+VJELwffOvEVUKxNNsanEtuFu7t8HJ5KMAjnb6Sr5f8tHrPnGZmNsHTL3xAcYLYXAi9
      2cJMcI76Ou+aGl5MXCo6w/T0NBcvXiSXy+HxeGhubl5XZ8iLEiqVrGjYrIVAIMCxY8c4deoU
      6XRa0dCXJIkDBw7Q19fHwYMHCYfDXLx4kUwmoxw0AWCz2XjjjTf49Kc/Tf/ILKIk8/KZIZ7a
      27RAZv72BLfbOdxTz42xEG111ehWIEolyzIvv/wyXV1dNDc3EwgE8Hg8RKNR7HY78Xgcq3V5
      Gp+jgQhf+eeLHN3RcF/Dpp9//x7O35jiqUdalrzm6X2tPL2vdcnXF6tCyDJ2u51UTq3ER5KY
      Y3TgBmp3PU6tSDwnY1aXToeWZXnFqbY1NTXU1NQgSRKBQIDe3l6y2Swej4f6+nrM5vLl3N8Y
      D/GFr51kZ6uH3/ypI4tezxVEbk1FaKurRqu+94Szra2NU6dO4Xa7kWWZfD6v9OrV1dWYzWas
      VisqlUr5rAqFAvX19ahUKlwul/I37z3YQjyV4fieppKpwW9dnSSZyfPU3ibFeU16NZ954RHg
      7nswpeyFQiGGhob4m7/5G44ePYrb7UaSJN5++23cbjddXV185zvf4fjx48TjcZ555plFNmVZ
      5vULI1wYnMYfivPU3tXPT1aaDn10ex1Ht9cB0N/frxzkUSQWi2GzzddCy7LMK6+8Qk9PD3a7
      XXHuxSOAnOfW8Dh237u50plEjIwoostl8cfSdNcJqIT5lYk7VyVyudyaZvINDQ00NDQgSRKh
      UIibN28SiURwu900NzdTVVW1phTcydkEyUye62Oh+XTYO0aZ//qd8/yod5gPHungU8/vu6c9
      q9XKE088seQ9v+c97wHAYnl3AubzvTscJ9I5fG27MJrMtFqt/NZPHwMWr2DMzCX5k2+/jSjK
      1Hts7GhZHA7djTvtybLMY489hlqtJhaLUVdXR6FQUNKJGxoayGaz7Nixg+rqahobGxf9vSAI
      qNVqnj3YTiie4VB33Zq++7WsAqXTaXbs2MHLL7+MXq9fkOPV29vLpz71Kebm5giFQgwPD2Mw
      GJiYmCglj65j797tDE+EkZifJZuqXBw4+tiC69Z77qpSqXC73bjdbgqFAtFolFu3bhGNRrHZ
      bDQ0NOByuVa8DPfk3mZUArTVOUqGWEa9BkEAg37pNbBEOsc/vz3IrtYauppcS163HP7L357i
      0lCAn3vfbj76ePeS11VZ9OxsqSGWylLvXrvCgyAISt7TRz7ykQWv3a7vs2/fvTsBr8PCZz+2
      sXMHlUpFf38/arUal8tFMpmkvb0dURRpaWlBEAT27t2LXq+nUCggSRJOp7P0PsCZk68ha23s
      O/TIkjvBG3VMqizLxONxRkdHCQaDGI1GGhsbqampuWvvkc/nEUURg8FALpdDq9WWdABRlPCH
      E9Q6rUvOEf7+xFW+8eoVvA4Lf/kbH1xTz/V/fuMkp/sn+eXnH+H9hztK3nM5KKc9SZJ45ZVX
      6OjowOv1Kgpx8Xgcu92OTqdDpVKt+DnYNPsAXp+XW5Nzm1IaURAEbDYbO3fuBOY33opF4bIs
      09DQQF1dHTqdbsED/uabb1JXV4fL5WJgYIBcLkdrayvxeJzOzk7lOrVadc8edkeLh5pqM0d2
      1K/5fj73k0eYjaTwOe+e7HV1eIa//eEV3neog2M7Gzhz5gx2u53Ozk5EUVR0Oe8HgiDgdrsZ
      HBzkm9/8Jnv27MHn8zE2NoYsy1gsFm7evMmnP/3p+9KetVDSAbLZLGIuvypx3Pu9jGmxWJSJ
      TzabZWJigjNnziCKIh6Ph8bGRsxmM2q1WtmHmJqaoq2tjXPnzjEzM7PAAZZDT7Ob//6bz6+5
      7ZlMBgCvw7zgcys1mf1x7zB9w0FESeZgZw0qlYpEIkFfXx/pdJpUKsXs7CxGo5FAIIBGo2Hb
      tm3rVtcgiiJtbW0YjUZaW1txu91Eo1FaW1vJZDLY7fZ1ed9yU1IbNJuR0OhWsw98/x3gdvR6
      PW1tbbS1tSnLq5cvXyabzaJSqQgGg9TX17Nr1y7m5ubo7Oy8p3jr1atXmZmZ4fjx44vuze/3
      43Q6lTDQ7/cvmOBOT0/j9XqRZZm3rk4wE0nygcMd6DRqJEni5MmTOJ1OZmdn2bVrF4FAALvd
      zo0bN3jyyScXvNeHHu1EkmWe3NuCTqcjlUphNpuZmprCZrNhsVhob29nYmICn89HKBRaN+1Q
      QRA4cOAAkiTR0fFu2Hb8+PF1eb/1pOQZYahhcmgI8fEjK06H2Czq0Gq1WknJkGWZUCjE6Ogo
      MzMzzM7O0tzcjM1mw+G4+4km4XCYaDTKG2+8wcTEhPI3wWAQvV6P0Wjk5s2btLa2ks1m+fKX
      v8zu3bvR6/Ukk0mamppo29bDn37rbbJ5EW+1hcPb65FlGb1ej9lsRqVScenSJQYGBti5cydV
      VVWL2tHktfNvf+LdieYTTzxRsr11dXVr++AeMkqGQAa1iNFZs+LwBzZ2BFgKQRBwuVyKQkIk
      EmFycpKbN28CUF9fj9frLZmjZLPZSKfT6PV6amtraW9vJxKJ0N/fT0dHB3q9nsbGRtRqNQ6H
      g/3799PU1MT4+LiygmIyaDnQXcdUMEZr7XxZn1qtpqurC1mWaWxspKmpic7OToxG4wOZHiJJ
      Mplc4Z1Vts3zjJRcBTp76nUkjXVTrgKV2142m8Xv9zM1NUU2m8XpdNLQ0HDX/YZCocCtW7eU
      3PTVti+XF/n+WwM4bEaqLAbaaquxmvSL2lgONroi7L9/7zw/PHeLz3x4P0/uLb1zu2lWgcxm
      DbdGohSWuuAubJYQaLno9Xqam5tpbm5GFEXC4TBDQ0PE43GMRqOSg6PVvhsMFieYa+XCoJ+/
      /sG71U+PbPPyez9/fME1M3NJXj47xNEd9bTVbq0D6G5nZDpCNi8yscmOeir5fFc7XIgTE0vW
      AtyNzTS8rRS1Wq1svsmyTCKRYGJigsHBQWWDpaGhAbPZXJb7bK2tpr3OQUGUGJ+JUmVePHJ+
      +/V+Xj4zRP9IkD/85afX/J4bxWc/dpj+kSAHuzfXHKVkCHTuzdeJZTU89uSjKy6K32oh0HLJ
      5XKKzEoqlcJut1NbW6vMK9bSPlmWCUZSOGxGNO/kHxXbePb6JF/+/kU+eLSD546sftS5nyGQ
      LMtkMpkFyXzLYdOEQKIoYTQaNuVG2HoQCATo7+/nscceW/CB3bhxg4GBAZ577jl0Op2SwSpJ
      kjKRLgqv1tXVUVtbSyQSwWKxcPLkSQ4cOEB1dTXpdFpJvpIkiXg8vmClRxAEPNWlE/4OdNVx
      oGtz9Zr3Ip1O873vfY9nnnmGYDDI7OwsOp2OxsZG5ubmyOVymM1mRcf0TtWO+0nJfQApLzE0
      NsIjh/ehAaRCjuGRMWpq3ExOh2nvaFlSOn2rhkD5fJ5Tp04xOjpKTU0NTqeT3bt3k0wmOXHi
      BBqNhunpaVQqFWazmcHBQT71qU/x4osvsnPnTl5//XWlcHvv3r2EQiHeeustamtryWazTE9P
      4/F4MJvNpNNpZmZm0Ol0DA0N8ZM/8wv84MwtDvfU0dno4tatWwwODvLEE08oo2kpx9ms3Lhx
      g0wmw/nz5+ns7FROs3n55Zcxm820trYSDAaJRqP09fXR3t5+z+Xo9WKRA6TjcQpaHS3NDcoy
      qCCokAsZJkYmwWJFkGQkuXQ69EYrJa/GXvE+NBqNkqas1+uRJAmbzUYqlUKn03HgwAFgfoNr
      3759ZLNZtm/fjsvlYteuXUxPT5PJZGhsbESn0xEIBJidnSWVSrF9+3YSiYQSNhQKBerq6qiq
      quIf/+U6L50Z4vJQgP/8K08RCoWIx+OcOHGCsbEx6urqqK6uJpvNMjs7y/Hjx1f8wKzX91Jq
      yXbbtm1s376dVCqF0WjE6ZyvLuvo6CAWi+FyuZAkCVEU2bZtGxaLRUlQW8/vuRQl5wBXzp9h
      3D/H0x98L3ogn0lyc+gWOpONZCRM+869GNVbUxz3ftvLZDIEAgH8fj+pVAqbzYbX68XpdCox
      8sWb0/zVi72890Abzz/ayeDgIENDQ3g8HkRRxOfzIYoic3Nz1NTUYDKZVjwSbPQy6HLYiO+5
      pANkM2lECYwm45LzgK2qDr2R9ophzOTkJMFgEK1Wi8fjweVyodPpFmzEraSNsixzczJMviDR
      1egqmcVacYDSlHy178I5CirzXTfCKqwclUpFVVXVgt77jTfeoFAo8MMf/pCenh7MZjO1tbU4
      nc5lPwxToTi/9cUfIsky//lX3rPmGoWHiZKTYL3eSiqVXZU69FabBCcSCcxmM4lEYsFKTXFO
      sFxkWSaWzGI26pSlzOWgUqkYHx+no6ODqqoqZmdn+eY3v0lLSwsqlYpsNovVaqW7u5vXXnuN
      Rx99lPb2dhoaGhQb7iozB7pryWQLNHgqx6GuhJLJcK0dLYQiyQcmF+hunD9/Hq/Xy8mTJzl0
      6BBOp5P+/n4cDgeyLONwOEgkEhQKBTweD5OTk8oENBgMKuWbI3Myf/7t0xzoruVzHz+ybCdo
      bm5mYmICl8tFf38/3d3dPPPMM3R0dKDT6YhGowQCAW7evIleryeRSGCz2RaIZOm0an73Zx67
      xzttDJFEhj/+5lu4qkz82kcOrKhzuB+U7OKuXOxF1lXha6hd8UmRW20fwOVycbFPj2UAAB5Q
      SURBVOnSJTo7O7ly5QrJZJKOjg5GR0e5ceMGR48eJZ1OMzU1hclkIh6P09zcjNPp5LXXXmP/
      /v08/vjjnBsZIlcQOXVlHJUg8Bs/dXRZ7397xmrxcOz29vYF8Wux+Ke4CjQ4OEgsFsNgMOD1
      epdM5NsM3JwIc3kogFat4mef3YXDtrLNsfWm5CR4dOAKvTf8fOj5Z5ccBZaaBKfT6RXvAN6L
      9Zwc5XI5CoWCUhxuMpmUuuNkMsno6CiFQoH29nbFAcxmM6IokslkqK6uRqPRICHw1y9d5Ptv
      DdJR7+CPfvXZu7dBlPiLfzzLzFyS3/ipI1RbF35md95zLJlFr1Wj171bGppOp5meniYQCJDJ
      ZJT5g9vtXiRRv1GT4Fxe5B/+5RoOm5Fn9rfe1Uk3zSQ4EktiUqsosPKKsK2GTqdTNmqK2jtF
      GRaLxbJIhPV2dYcihUIBnUbNz79/D3vavUrK892Ip7K8cXmUfEFicCJ81xyZgfEQv/fl16hz
      W/nDX36a0ZFhZSRyOByYzWbMZjOTk5NcuPCuAlpdXR0+n29B0c79RqdVb+oTbkpOgtUqPTqT
      tKqDsh/EXPbbKQrI6rRqtjUslA/UadTLTvayWwz8wvv38Oq5WzR67r6mH01kSGfzBCMpREmm
      v7+fTCZDPB4H5h1wdHSU+vp6pRY6GAxy7NgxpqamGBgYQBRFnE4ndXV12O32sh/qV+TChQuk
      Uil6enoUnSRRFBFFkXg8jsvlQqOZrwmori7/kUcrZfGnIKiYnJpCb7Symmh+o3qa+8WtqTn+
      /ZdOoNWo+K+few5X1er2PARBIJLIMuyP8P/+4xn+0796asHrBVEilkpTbTWwr7OW3//F4zir
      TBh0Go4ePapoMsmyzFe/+lUee+wx8vk8bW1tzM3N0dzcTHV1tfKQZbNZYrEYU1NTXL16FZVK
      RXV1NT6fD7vdXrb1/Gw2q6RBTExM0NjYqKhwyLLM4OAgVquVyclJfvZnf3ZZNlOZPN96rZ/G
      GhvH9zSXda5TohtQU+tzEogUVhX+POgjgNWkx2bWY9JrMejW1ovWVJvRadTUOhdLEP7Zt09z
      9oafX//IQY7vbWZ3+7tylMUM1CKf/exnF/xcSkP09lRvmB81QqEQ4+PjXLlyBZVKhcPhWLND
      tLe3Mzg4iMfjwefzKSWamUyGW7dusXPnTuLx+ILa6Xtx5tok//Av19Dr1Bzqqcd0F82mlVLy
      pHhBo8I/PH7PE2JK8aA7gKfazBc/9xwqlbBmB3h6XwsHumuxGBZXXsxG0+QLEnPx9LLtJdM5
      egen2dXmKVlbcDsajUaRpCzKWYbD4TU7xO2lp3fi9c478UoPt9je4mZHi5sWXzWGNYj/lmKJ
      AzKGOHd5kPc9/74NqweQZJlwNI3dagB5ZZtSAK+//jptbW3U19czNzenyKIIgrBA+HVsbEyJ
      p+9UYL4zrSObzaLRaBQJwSKFQkEpoIlEIqTTadra2pRrSh0cGA6HuXXrFtu3by+5ahacSzA2
      E2NXWw3aZYrefvE7Z/nBmSGO7mjgt3/60QWvrTS1ougQfr+fSCSCWq1WQqaqqirUavWDmQoh
      yxKpVJqWjg4lBJLyaQaGRrBabMzFknR3b1tyglyuEeCf3xrkKy9d5KlHmvmV5x9Z8d9PTU2h
      1Wrp7+9HlmXcbjdVVVVoNBoikQi9vb185CMfIRgMKuFAoVAgHo8rdcJer5eJiQlqa2s5e/Ys
      1dXVdHV1EQ6HSaVSVFVVKbKN1dXVVFVVMTc3h9Fo5Nvf/jadnZ0EAgEikQjNzc3Mzc1x8OBB
      ZaLY3d3N6OjoAinCItVWA+7qlZ2MWOuyotWoqHMtT9V5KQRBQKvVlhwhJiYm6OubP7y7qqqK
      2tpaRQ1uK1JCHLdAOBxDbZQVbVCVxoBWEAnGkrQ6jcRzMlZN6XToQqFQlpTWcDxFQZQIRdOr
      SpPVaDTkcjnS6TRqtZp8Pq/8HI1GyWazBINBJEnCaDRy6NAhxsbGuHz5Mjabjfb2dkKhEC0t
      LUxOTpJOp+no6CCfzxONRikUCtTU1KDT6RgdHVV2ja1WK9PT0/h8PmZmZkgkEni9XiKRCDqd
      jmQyqZxJ7PP5mJycLHlvq7nnDxxu5/FdjViMukV/u9ZUY0EQcDqdSmpz0SGKk2pZlrFarfh8
      PhwOx6ocYtOkQw/1nWc4lOf4E4fRMJ8OfWt0HJvVxlwsRVdnOwLrGwJl8wWuDgdpr3dg0qnX
      bWgs9vBrWb1a7dA9MzODzWYr+Xkt1+aVK1cwmeYP1LhbjcB6b4QVR0+/3084HKZQKGAymfB6
      vbhcrmVlCG+KEAgglsohpZLkJQmNSoXWYKazc36Y9r1zcPlSkc5SIdDMzAySJCkToVIUd2WL
      RwM9ss2n3Igsy4yNjeHxeMq601xfv3Z9z9VSarVmJeRyOaXI5sKFC3R1dfHWW2+xb98+QqEQ
      JpMJWZY5duxYmVq8NBqNZsGyqyiKJBIJAoGAcpSu0WjE4/HgdruV+dhGU9IB7DYT/nCCYCBM
      o29lqbVLOcD4+DiRSESR/xsZGVFOgolGo0iShNVq5cKFCzgcDlQqFV6vl0KhgNFoJJfLMTEx
      QTabpbq6munpaYxGI+FwmKqqKkXvfd++fesmCbhaxsfH8Xq9TE5O4vV6F7QvEokoOpqSLPPi
      mwPMxdN87Inue/deGg2xWAxZltmzZw+hUAhZlslms7S2tnL9+vUNq7VVq9ULUr9lWSaVShEM
      Brlx4wbBYJChoSEOHz5Ma2vrIi3RiYkJ6urq1t1JSn7CoZCficEwT75v5XnlS4USsVgMn8/H
      6dOnUavVOJ1Oent7leNAw+Ewzz//PDU1NfT39zM2Nsajjz7K3NwcVquVzs5Ostksg4ODilKb
      z+fDZDLx6quv0tDQQH9/P263uyyaPeUkFothtVq5efMmvb29pNPz85qqqipcLhd+vx+9Xs/h
      x57iqz+4REGU2N7sZv87xfDXRoMkM3ke2eZDddsDoVKpeO9736v83N7evkAMt63t/hxX1Hdr
      hhMXR/jwsU4a3tnVzuQKnO6foKvRRY3DgiAISspGc3Mzs7OzJBIJpqammJycJBwOE4vFGBgY
      4NlnnyWdTuN0OtFqtUSjUZ577rkF2kzlYpEDpKKzRJIy1bW2VR2TutQIUFRcaGhoUOJFn89H
      MplUJkwGgwGPx8P27duV5C5ZlhVdf6vVislkUmpNi71b8QCEJ554YtnnWt1PCoUCY2Nj1NbO
      x4/FXH+Px0Mul0OtVqPX67FbDLxnfyvBSJJQNMXNiTDVNgO/9+XXyBVE/vCX30P3Jix2+fqr
      l7k2OosA/PpHDwLwTyev87c/7FsyMdBgMFBdXU1DQwPpdBqbzYZWq1XSOUKhEKlUCo1GQ0dH
      B+l0WkmhKCeLHMBU5aLW4yafD5d1I6w4nBcf0GKsWEpG22AwLAgTivOC4rV3rjAUbZe7FLNc
      7N69W/n/7WdYFbn93N/PvLCfM9cm+cLX3sBi1PHn/+Z9+JxWYqksDuvqQ7svv3SJC4PT/OZP
      HcUoZOjr66Onp0cp0M9ms7jdbmZnZ/F6vSSTSWKxGG63m1QqhSRJGAyGkhPt9x9qB+D43mbl
      d/VuGwadhhZfaZl0i8Wy6MyxOyetkiSRyWSYmZlhYGCAWCyGRqPB4XDgdrtxOBxrHhUWrQIl
      5uZIyeCsst01fnzYhLHup70Rf4R//6UT1HtsfP4XjwPz4rL6Zew8F0SJt66OU++20eJ7N9ns
      f/nCPxJNZvml5/bSZp9XpOjr62NoaIiOjg5yuRzBYJC5uTkaGxux2WzIsszk5CROpxODwTC/
      MPHI/J7MvdKhZVkmnS2g16lR3/GMXBj088XvnOPZA238xPF3O4R7fY7F5LpIJMLMzAzhcBhR
      FDGZTLjdbkV2ZiV11YscIBML8c8/fJ0qu4fHnzq24p3grVYPsBntASTTWfQ6LRq1ikQ6x+n+
      CXa3e++ZfPfahRH+5FtvY7fo+dJvv6BUYF0YnGJgPMzzRzsx6NScPXtWOaGyGJoVCgWuX79O
      V1cXZrOZS5cu0dDQoMzfgAWnLpZygFAopOwVZLNZotEoTqdzwXVf/v4F/unUDdrqqvm/f+29
      XBsNEktmeaSjZsU9uiRJpFIpZmZmFDkZrVarrEjdqet6J4u+NYPNSUudF/9MbFXZoA96LlC5
      mZlL8oWv/Qu1Lhv/60++W0qp16qV//9/P+rjxTcH2NPh5fd/4fhd7fmcFixGHa21jgUT5p0t
      HvZ21Co/L3VyzNGj71ayHTw4H8+vJHFtamqKc+fO4Xa7GR8fx2q14nK5uHHjBh/72McA+PDj
      XRgNWg501RJJZPg/vvI6mVyBz//iE+xuX/57wfxCgMViwWKx0NraumCUmJ6eZnh4mFwuh8Fg
      oKamBpfLpRxbC0uE+E0tTYiGyKrEcR/0dOhyc8s/x8h0FH8oQSqTx2bWL7qm2WvHoFPTvoxC
      m85GF1/67Q+hVavKchD4SjEYDHR0dBCJRFCpVGg0GqLR6ILJq8Nq5BPvFMlkcvOF/KFoGqdt
      7XM4QRDQ6XR4PB4cDsd8td47c4liOWk8HketVmOxWErvBI8N3cA/m1zV+QCVEGhl5AsiL52+
      icdu5lBPXcn4VZZlsnkRnVa9oFeH+aS/xsZGWlqWPi09FAop6/LlWkUppy5QQZSQJBmVIN+X
      76XY9lgsVvr5npubg1X1/5UQ6MqVKzQ0NDA3N0dLSwuBQACPx7PgwUsmkxgMBs4PTHOqb5yP
      H++h7i4nUwrC0qnX09PTSi/n9/vR6XQ4nU6mpqaUNly7do2enp4N1xWdnZ1VUqWLeyFms3k+
      1FOzIG/n9ozdclM84Lu6urq0A5hMRmYm51alC/Swh0ADAwPK8P/SSy/R1dXF8PAwwWCQpqYm
      kskkKpWKvXv38vVXLjMaiGIz6fil5+6d8ZrNFZiNpal1WhSHMhqNaDQarly5gl6v54knnuDV
      V19Fo9GwZ88eJicnMZvNSJK04akHfr+fs2fP4vF4GBsbw263K3s8arWavr4+mpubyefztLS0
      0NfXR3d3Nzt2rF9NcYl0aJF8Lk82X1BkEaV8hoGhYSwGA9EcdG1bWh16q8milJuuri5mZmYw
      GAxKyJHJZNBqtQSDQQRBUApCPvxYF69fHOH4nuZl2f6Dr5/k8lCAX//oAZ7e1wrAhz70oUXX
      vfDCC8r/i6fBl1sYdzUYDAa6urqUkAxQ9JaKNcJer5e+vj7y+TxarZZ0evkFQauhxAggodGa
      8Lo1ygggaLRYLWa0ag0kI+QLMlqhdDq0KIpbTh26nPY6OzuVc4eLatKlSGfzXB8NsrPVQ6PH
      tqz05XQujyTLZLL5Fbf/fqpD38610Vlmoyke3dGgzFMaGhrYs2fPomubmppQqVR0d3cD724a
      rrbdy7nnEjMEid5z53F46xUHENNxwtEUbqcdjUaLRi2gQqUUZt+OTqcr+5r4Zpq0lste33U/
      L5+9hVat4ul9bVTfsctbyuZ/+LknmAzGaK93LNhcyuQKzEZT1LmsSJJEf38/27dvX/Dd3Glv
      rSLGsiwrsfRSJNI5vvD1k6SzBcxG/T0VMzZFOrSg0nP8qcfouzb87kUmOzu3z29pF9OZl3L8
      UqecV1jMjlYPx3Y2UOOwUFVi6bMUFqOOzsbFuUCf/+vX6R8N8u9+4jD11gJTU1PAvL5RLpcj
      FAphNpsxGAwkEgn27dvH8PAwNpuNWCxGPB7H4XAwMjKihHD79+9f8z3qtWra6xxMBuMlC/83
      A6XdQxaRBNWqjkiqsDysJj2/+YlH733hMsgWRGQZ8qKEw+Hg4sWLTE9PKxPg9vZ2RFEkEonw
      yiuvsG/fPvr7+0kkEmi1WkwmE4FAgO7ubk6cOEE0Gi2LA2g1aj7/i08iyfKm0wQtsmgfQJYk
      zr71BsFQivd86P0s1TcttQ9QqgB8rWyGkKVc9kZHR4F5ZQSDwUAkElEmfLcnBq7EZiKdwx9K
      0FZXjcD8cU8ajWbBdySKImq1GlEUlXJRtVqtxPBqtRpBEJT63zsTDiVZ5s2+cYw6Dfs6axft
      AxTz/I8cOUI2m0Wr1RKJRBQZliLBYHDR71Zzz8thVSFQOhbg+vUhYjn1qkaASgh0d4aGhvD7
      /djtdiYnJ+nq6mJ8fJy2tjYOHz68KpsWo46O+nezNEvV4xbVpIsd1lKdVHEn9U5+3DvM//M/
      z6BWC3zxs88tOtQvHo9TKBQ4e/YsgiCwY8cOpQrwm9/8JgcPHiSfzzM7O8vu3bv57ne/y2c+
      85myd5YrZZEDGKu8PP74MRy1jauqB6hwd3bs2MGOHTuYnp7G6XRSX1+PXq+/a6noZqA4UtTY
      LSXTNQwGA9lsVlGqhvnTN0OhELW1tVRXVys6rNPT09TV1ZHP5zfcAZZMhZgKxHjk6IEl94Mr
      IdD62Vuuzb/87jlOXRnnNz/xKDtb715fvNY2SrLMsD+C12HGbNA9MEckLZqZyFKWU2+cJhZP
      rOpNKyHQ/aN3wE80meXG2GzZbWezWc6fP6/0/CpBoK22GnMJFbutTMll0F27u0nk1KtSh65w
      //itTzzK1ZEgz+xvXfD7V88N0TswzS+8fw+paFApyC9VI1xU27i9Kg2gt7cXjUbD6OgoWq1W
      mSDfunULj8fD1NQU9fX1FAoFZeNqK1JyfDCaDMzGk6syuFEqBA8jbXUO2uoWlyh+7eXLRJNZ
      Wmur2e6ZDwX6+/t5++23cblcXLhwgb1796JSqZQz0r74xS/yu7/7u0rBi0ajYWxsjFAoRDgc
      pq2tDbVazUsvvcSBAwfo6uri/PnzRCKRLe0AJecAZ998g5lgnKdf+ABLFTdWjkldP3trtfnK
      2SF6B/z84gf2UmXS8Nprr9HY2MhXvvIVPvnJTy54aK9du6Zkjx47dkz57u58LK5fv05nZ+eC
      hLriylK5kuzK8Tm+em6IL33/Ap94egfPHW5feUlkOhoinMpy7fotnnry2F01QCsOsD721sPm
      w3JO8J98621euzDCga5a/refPrryfYBMPMK1WwFyqRQFVl4VUAmBKmwkP/++3bTVVnNk+/IU
      /0qGQKKYRxQFdO8UYUj5DAM3h9HpDSSSaXp29KBeQhu0MgLcf5tz8TT/43u9dNQ7+PBjXQwM
      DFAoFNi+ffuS9rLZLENDQ4yPj3Pw4MFlH1dUlGI0mUwIgsD4+DgjIyMcO3ZsUXsjkQhGo5Fg
      MIjFYlkkgdPb28v27duRJEnJRypOvH0+37IFdoviasUTc2B+Q29VqhAAUiHB5FSWhsb56n5Z
      EpmcnCQrgtsgIFXXK+rQd8Z/61ESefuZuA+DvZXafPXcMP/tu+fRa9V89Xde4Mrli+zYsYMT
      J05gMBiIxWI0NDTg9/uxWCyYTCblgAy1Ws2lS5c4c+YMx44dU6Tes9ksRqORbDaLSqXCZDJx
      /vx5XC4Xra3zq04Wi4VYLEYgEEClUhEIBGhsbMRgMCiKd4lEApPJhM/nIxgM0t3dzcDAAJIk
      MTU1xeHDh+nv7yeXy+F0Ojl16hQvvPACBoNh0crUUrz88stks1l27dqFIAhMTk7i8/kIh8OY
      TCaampqW7JQXuUchl+bS5X4kWcBkN+K0mRCzCSLxND6PA38kyTavAHIlHXq97K3U5tEdDVwf
      C9FR78Cg16JWq7lx4wYqlQqDwcC2bdsYHx8nGo0qB+QVT7s8f/48jY2NHDp0CJ/PR1tbG5Ik
      MTQ0hE6nU6qzkskkLS0teDweJW9IpVIpcuizs7PU1dUxNjaGw+FgYGAAl8tFNptVJA41Gg0q
      lQq1Wo3RaOTo0aOKRHxRfuWRRx5RhNGWe/9qtRqz2czJkyepr68nm81SW1uLzWbjtddeA949
      a/lOFo0AszMBzGYjA8NTeFzV+Lylj7OpTILXz9562PT7/aRSKVpbW5U1/ZmZmRUfV1RkqUnw
      Wr7/4j3PzMzgcrmWPQIODg6iVqsVBzOZTCQSCcLhsKJIvVSIt8gBUrEwfZeuEBV1HD9+ZMXC
      WBUH2Jw2H5ZVoJXaW+Rimbkg16ciNDd4VpUNWlkFWhnJZHLJskJJkkgkFqak5AoiL745wMXB
      6YdegaMcLHKPvFrHgUd24XVWMXRzmM72pfVmSlHJBVoZxVTot956C7vdTiaTQRAEJEliZGQE
      m82Gz+cjGo3S0dHB4EyO//FiL0a9hr/+nQ+v+aTKh51FI4CnrhmrVmTMP0tba/MGNOnhIpvN
      cubMGU6ePEkgEOD8+fNMT0+TSqWwWq00NjYiyzJzc3PMzMzQVuvA67Cwb1stWs3Cr0+WZXJ5
      sTIyrICSy6BXes+QymtWpQxXUYfeOJsvnb7JV166wMeO9/Cx49sXvFaZA5Sm5DTbbDIQXWU6
      9MOuC7SR3JwIk82JDIyHN7opW4YljkiKkE8mKCx1QYVNyc+9bzfbGpzs71qZwvJqECWZV84M
      YTHpeWxX44arzq2WEspwBdxuN7GCrqIOvUlJpVLKSZpFRFHEatLx3oNtSniynt/F9bFZ/vJ7
      vahVAp2NLmruqBHeKpTs4MNzcUxI5GDJdOilqIRA68/Y2BhjY2M0NzcTDofRarXk83msVquy
      K3ru3DmOHDmCLMsYjUYCgQBOp1MRp10r9W4brT47NosBu2Vj63rXQklluJnANAZHzaqK4rfq
      ULiVCIfDHDhwgLfffpvq6mpEUUQURYLBILFYTEkFOH36NDAvoDs8PMzu3bvL5gBVZj1/9KvP
      bPl9nxIlkTpcLiOnT1/l8LFDrPT2Kg6w/jidTqLRKI8++qhycmIymSSbzSqS44FAgEOHDikb
      bd3d3avaoS8UCvzwhz+ks7OTlpYWJbntQfmeS4ZAtU09PKpzKA+/JOYYHBqn1m5kNJKlu6IO
      vaEUxXdv584M3OJpjsUzASwWy6qWGEVRZG5ujomJCfr6+ohEInR1dXHhwgWOHDlCIBCgpqaG
      H/zgB+zfv594PI7RaCQej/PRj350FXd3fyn5iaRiIcKxlPKzSq2jympCVquR07NkCzL6ijr0
      utlbD5urtSfLMmazGaPRSCwWo6enB5VKhcPhQJIkbDYbgiCwbds2jEYjbW1tjI6OYjAYNlzB
      ejn2Sm6EzUyO0nvxBk8+9yx65gtirg0M4XK5iCfStLY2IyxREFPZCNucNisbYaUpUQ+QYSYY
      pICghDkqrUGpLipmzy61214JgSpsJRY5gFgoMDI6iZiHAqx4JehBmRxVeDhYnA6dSLN75w7c
      9XUrXgGCigNU2Fgu3pzmG69eJp7KLuv6RSNAZHqCN69cR1Dp2Xl4/4p3gyshUIWN5M++fZpw
      LI1Rr+VDRzvuef0iB2jatZemXXtX3YDKCFBhIzm+p5mz1yfZ3ba8Us+Sq0DLoZIOvX721sNm
      ue3lCyLfPXUDq0nPM/tby9LxbYpVoLVSCYEeDm6Mhfibly+jVgnsbquhxmG5L+87NDREMBjk
      0KFDitMVd8Dn5uaora0ll8tx+fJl3G43KpWK+vp6RRHjTsruAJUQ6OGgscZGT7OLKrOBalt5
      daDuRS6X40c/+hFarRaXy8Xg4CBWq5VwOExnZyeyLDMxMUEgEECr1TI3N0cgEECn0+H3+/F6
      vRw/fhyoOECFVWI16flPv/TkfU+GK6q/FU+9HB8fp6WlhUwmo6SIxGIx6urqqKqqwmQy4fV6
      EUWRRCKBz+dbMBKUfQ5QkUXZnDbXai8QCJDJZNDpdPh8PuLxOKFQiObmZuBdBQtJkkqGGvej
      jauxVxkBKiyLUCjE4OAgLS0tDA4OIggCuVyO/v5+UqmUos/Z2dm5agfYCCoVjxWWhcPhYM+e
      PUSjUdra5qvOZmdnicfjVFVVodfryWQyiuTiVmFZDiCJOW4MjuFxmJjwh+jeuRPtEh19RZLj
      weTOUyxlWcbn8z14BTGlUKl1VFeZSWcL1LtspAsyanXpdOgHOTX4ftlbD5vr1cZydngbcc/L
      GwHyGcJzc9R4vcTiaZp1S6tDF0VKy8lmmxCut731sLke6dCCIDx46dClUGkN9PT0AOB850y2
      pfy+EgJV2EqUXTejIotSYStR9qe1MgJU2EpUHKDCQ00lBKrwUFMZASo81FQcoMJDTSUEqvBQ
      UxkBKjzUVBygwkNNJQSq8FBTGQEqPNSsyAEi/nH6Boa520GoFQeosJVYUeqdoNOTj8+QyTdj
      UJVOh5Zl+aFLDa6kQ5fP3qZMhy5iNJmwu2owaQSgdDp0Pp9/6FKDK+nQ5WHTpkMX0RkttDTN
      l7wt5fiVEKjCVqKyClThoabsT2tFGa7CVqLSXVd4qFmTMFap3n49Dmgut83Nbm89bK5HG4sT
      4XKxEfe86in3UisApVaG1kq5bW52e+ths9z2iv1mOR1gI+75/wc/QGoLXwzENwAAAABJRU5E
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Relationship2' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='Relationship3' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 10' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      Pf+6rsc7yhxpBrAsi+/+kz9EzRj89N/9NZqm8e0//T7epEoY9Qix0W5SrW1Tub8h9nZlC9f3
      2SpvE5nyoWw6nfQUJVMlXnSI2o79ipkEpEjifOkkrY0qn3/5Oc6IVJT9MF+cRdkMuP7J1UNb
      hI6EF2gUJElianqa7/79H/KTf/0fabfaZHNZ3vnj3+O3f/G3+CtlfnXtGq/OzXCnuso7Z07y
      0VfX0RWYzGWRrEfXO7vdLtevXGNrbQtkUAyVr7/z9T1d315kRFEUb3Hk+z5Xf/sZBTM39FhF
      NKTVTcIw5MrnnzK/dILZ0szQ44chLka631oeetH9Gx9/SdD1mH9liZm52Yd650eaAQR0XecP
      //MfxR4ZVVV56fde58//5/+FTreFG00jSTKBanFiIkOt6+KHAdYjRnCbzSb/2z//X5mamcIq
      Wnz1m6+QHHj/r35LbqHAn/xnf8KpU6cO8QmfP4jVX8CxHZR6QCY73EmhJd6FLMlMmnnK99ap
      VMpcOHNhT3xgEJ7vs1JfJ7tY5Nz0BWA3aOlvtZkyi1R+d4+N3DKLr55hcmpvmrXo3t1XqHOU
      jeBRCMOQer3Otd9+jrRu47k2kayhqwpdu0vaytDpdlB0lYt/7y2mpqeGXsdzPXLdCyAAACAA
      SURBVO7cvEVlZYfQDyidnObCpZfY2dnB93xu3rhJaapEPp/l6pXrNFc3+MVP3mdyIs/lP/wW
      3//eu2yu3kbJTFPduM3JC5eZyB6vHV1GoVat8eXnVxFrbRAERKsdJrMTQ4+/vnqTE7nZPZ/7
      YUDVa3L23AUKI5in2W1RkZssnDkxNC3l/b/4O6al3rlRFNF02wQljVOvnSdf2L1ms9ncU2n4
      XEiAQYjOYI1KnZKSRk3temey6Z6rMmP1dP/VG3eZnJocKhY//90nuDeqqLKKG3iU02VgNzA3
      O9d7YVEUUq7WKBUy+KbL3/3tXX7xf/4Vd967SuZkkQuXFilMzLNy5x4Tr118os9+VGDbNv52
      m0klD4SsbmwwPTVPo90il87g2m2aXoQWuShGBmlE0FGVFSb1PF9++QVnzp1jqtD/rrabZaKS
      ysnZUyNVm9lXlmh/uklK61V65YwMUTPizs+uoMxZnH71fBwPEvle8f0PdVaeMnITecJNF3kf
      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
      dfn/AaoLeQFmvD/BAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 9' width='192'>
      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
      /f8BscJShPq7k00AAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
